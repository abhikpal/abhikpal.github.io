<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Abhik Pal's Weblog</title><link href="http://abhikpal.github.io/" rel="alternate"></link><link href="http://abhikpal.github.io/feeds/all.atom.xml" rel="self"></link><id>http://abhikpal.github.io/</id><updated>2017-08-27T00:21:31+01:00</updated><entry><title>p5: Google Summer of Code progress report</title><link href="http://abhikpal.github.io/blog/2017/08/27/p5-google-summer-of-code-progress-report" rel="alternate"></link><published>2017-08-27T00:21:31+01:00</published><updated>2017-08-27T00:21:31+01:00</updated><author><name>Abhik Pal</name></author><id>tag:abhikpal.github.io,2017-08-27:/blog/2017/08/27/p5-google-summer-of-code-progress-report</id><summary type="html">&lt;div class="section" id="what-was-the-project-about"&gt;
&lt;h2&gt;What was the project&amp;nbsp;about?&lt;/h2&gt;
&lt;p&gt;The main goal of the project was to create a Python library based on
Processing. While Processing&amp;#8217;s emphasis on teaching programming in a
visual context does make it easier for beginners, the fact that it&amp;#8217;s
based on Java often makes it look needlessly complex to most
beginners. The main motivation behind creating p5 was to leverage
Python&amp;#8217;s readability and Processing&amp;#8217;s emphasis on coding in a visual
context to make programming easier to&amp;nbsp;teach.&lt;/p&gt;
&lt;p&gt;The Python mode for Processing was also created for similar reasons,
however, since Python mode was based on …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="what-was-the-project-about"&gt;
&lt;h2&gt;What was the project&amp;nbsp;about?&lt;/h2&gt;
&lt;p&gt;The main goal of the project was to create a Python library based on
Processing. While Processing&amp;#8217;s emphasis on teaching programming in a
visual context does make it easier for beginners, the fact that it&amp;#8217;s
based on Java often makes it look needlessly complex to most
beginners. The main motivation behind creating p5 was to leverage
Python&amp;#8217;s readability and Processing&amp;#8217;s emphasis on coding in a visual
context to make programming easier to&amp;nbsp;teach.&lt;/p&gt;
&lt;p&gt;The Python mode for Processing was also created for similar reasons,
however, since Python mode was based on Jython, it limited the ways
people could use Python. This was another motivation for creating p5,
we wanted a library that used the Processing &lt;span class="caps"&gt;API&lt;/span&gt; while at the same
time giving people access to Python&amp;#8217;s large ecosystem of&amp;nbsp;libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="goals-for-the-gsoc"&gt;
&lt;h2&gt;Goals for the &lt;span class="caps"&gt;GSOC&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;We were able to meet most of our goals for the summer of code period.
These&amp;nbsp;included:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;[ &lt;strong&gt;&lt;span class="caps"&gt;COMPLETED&lt;/span&gt;&lt;/strong&gt; ] Create a system that could work with
Processing-style sketches i.e., if the user defines a
&lt;code&gt;mouse_pressed&lt;/code&gt; function, p5 should be able to automatically
attach an handler to it, if the user defines a &lt;code&gt;draw&lt;/code&gt;
function, p5 should call it repeatedly,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;[ &lt;strong&gt;&lt;span class="caps"&gt;COMPLETED&lt;/span&gt;&lt;/strong&gt; ] Add support for for basic 2D drawing &amp;#8212; creating
rectangles, lines, points, circles, etc. We also added two new
features to the Processing &lt;span class="caps"&gt;API&lt;/span&gt;:&lt;ul&gt;
&lt;li&gt;Since tuples, lists, and vectors are often used to store
coordinates in space, we changed the original Processing &lt;span class="caps"&gt;API&lt;/span&gt; to
use tuple-like objects by default. So, if a user wants to draw a
line from &lt;code&gt;start = (0, 0)&lt;/code&gt; to &lt;code&gt;end = (100, 120)&lt;/code&gt;, they
can just call &lt;code&gt;line(start, end)&lt;/code&gt; instead of
&lt;code&gt;line(start[0], start[1], end[0], end[1])&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added new methods to draw circles and&amp;nbsp;squares.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ &lt;strong&gt;&lt;span class="caps"&gt;COMPLETED&lt;/span&gt;&lt;/strong&gt; ] Add a color parsing system similar to
Processing&amp;#8217;s. We also extend the Processing &lt;span class="caps"&gt;API&lt;/span&gt; using Python&amp;#8217;s
keyword arguments so users can use commands like
&lt;code&gt;fill(red=255, green=127, blue=51, alpha=127)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;[ &lt;strong&gt;&lt;span class="caps"&gt;COMPLETED&lt;/span&gt;&lt;/strong&gt; ] Add utility functions to perform basic
mathematical operations, computing trig-functions, and generating
points for curves and bezier splines. We also tweaked Processing&amp;#8217;s
&lt;code&gt;PVector&lt;/code&gt; class to make it more intuitive to use. For example,
the syntax for adding vectors in p5 is &lt;code&gt;vec_sum = vec_1 + vec_2&lt;/code&gt;
where &lt;code&gt;vec_1&lt;/code&gt; and &lt;code&gt;vec_2&lt;/code&gt; are&amp;nbsp;vectors.&lt;/li&gt;
&lt;li&gt;[ &lt;strong&gt;&lt;span class="caps"&gt;COMPLETED&lt;/span&gt;&lt;/strong&gt; ] &lt;a class="reference external" href="https://github.com/p5py/p5/releases/tag/v0.3.0a1"&gt;Release p5&lt;/a&gt; to the Python
Package&amp;nbsp;Index.&lt;/li&gt;
&lt;li&gt;[ &lt;strong&gt;&lt;span class="caps"&gt;COMPLETED&lt;/span&gt;&lt;/strong&gt; ] Add &lt;a class="reference external" href="https://github.com/p5py/p5-examples"&gt;example code&lt;/a&gt; and &lt;a class="reference external" href="http://p5.readthedocs.io/en/latest"&gt;documentation&lt;/a&gt; to help people get&amp;nbsp;started.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We had initially planned on adding support for displaying text and
images, but unfortunately weren&amp;#8217;t able to do so in the &lt;span class="caps"&gt;GSOC&lt;/span&gt; period.
Before week 8 of the coding period, our code was using immediate mode
rendering and our sketches would slow down under load. Instead of
implementing new features like image support and text support we
decided to address the optimizing issue first and re-wrote the
rendering code to use retained mode rendering and use numpy for all
internal&amp;nbsp;computations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-needs-to-be-done"&gt;
&lt;h2&gt;What needs to be&amp;nbsp;done?&lt;/h2&gt;
&lt;p&gt;Even though we met most of our goals for the &lt;span class="caps"&gt;GSOC&lt;/span&gt; period, p5 is far
from being complete. Before we start adding more features, we would
like to fix issues #9 and #10 first. Right now, p5 is practically
useless on computers running Mac &lt;span class="caps"&gt;OS&lt;/span&gt;. Most sketches stop refreshing
after drawing a couple of frames. Since I do most of the development
work on a linux machine, I haven&amp;#8217;t been able to debug this properly.
We would really appreciate help from mac users who are willing to test
things out for us and help us debug&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;Our end goal is to implement the full Processing &lt;span class="caps"&gt;API&lt;/span&gt; in Python,
however, we would like to focus on the following features in the next
couple of&amp;nbsp;months:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add support for live coding of sketches through the python &lt;span class="caps"&gt;REPL&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Add support for&amp;nbsp;images.&lt;/li&gt;
&lt;li&gt;Add support for text and&amp;nbsp;fonts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="using-p5-links-to-things-etc"&gt;
&lt;h2&gt;Using p5, links to things,&amp;nbsp;etc&lt;/h2&gt;
&lt;p&gt;p5 was released on the PyPI and can be installed using pip. For
complete installation instructions, see the &lt;a class="reference external" href="http://p5.readthedocs.io/en/latest/install.html"&gt;installation page&lt;/a&gt; on the
documentation. To know more about the project, use the following&amp;nbsp;links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://p5.readthedocs.io/en/latest"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/p5py/p5"&gt;Project source&amp;nbsp;code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://p5py.github.io/"&gt;Project home&amp;nbsp;page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/p5py/p5-examples"&gt;Repository with example p5&amp;nbsp;sketches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="processing"></category><category term="gsoc"></category><category term="p5"></category></entry><entry><title>A quick Google Summer of Code update</title><link href="http://abhikpal.github.io/blog/2017/06/27/a-quick-google-summer-of-code-update" rel="alternate"></link><published>2017-06-27T00:03:45+05:30</published><updated>2017-06-27T00:03:45+05:30</updated><author><name>Abhik Pal</name></author><id>tag:abhikpal.github.io,2017-06-27:/blog/2017/06/27/a-quick-google-summer-of-code-update</id><summary type="html">&lt;p&gt;My proposal to the Google Summer of Code was accepted and I&amp;#8217;ll be
spending the summer working on &lt;a class="reference external" href="https://p5py.github.io/"&gt;p5&lt;/a&gt;. It&amp;#8217;s a
native Python library that will expose an &lt;span class="caps"&gt;API&lt;/span&gt; similar to&amp;nbsp;Processing&amp;#8217;s.&lt;/p&gt;
&lt;p&gt;Use one of the links below to know more about the&amp;nbsp;project:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Google Summer of Code &lt;a class="reference external" href="https://summerofcode.withgoogle.com/projects/#5809403503575040"&gt;project page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://github.com/p5py/p5"&gt;code repository&lt;/a&gt; on&amp;nbsp;Github.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://p5.readthedocs.io/"&gt;project documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&amp;#8230;and the &lt;a class="reference external" href="https://p5py.github.io/"&gt;website for the project&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I plan to use this blog to post ocassional updates about the
development process/other things; there are &lt;a class="reference external" href="https://abhikpal.github.io/feeds/all.rss.xml"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt;/&lt;a class="reference external" href="https://abhikpal.github.io/feeds/all.atom.xml"&gt;&lt;span class="caps"&gt;ATOM&lt;/span&gt;&lt;/a&gt; feeds you can
subscribe to if you want to follow&amp;nbsp;along.&lt;/p&gt;
&lt;p&gt;If …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My proposal to the Google Summer of Code was accepted and I&amp;#8217;ll be
spending the summer working on &lt;a class="reference external" href="https://p5py.github.io/"&gt;p5&lt;/a&gt;. It&amp;#8217;s a
native Python library that will expose an &lt;span class="caps"&gt;API&lt;/span&gt; similar to&amp;nbsp;Processing&amp;#8217;s.&lt;/p&gt;
&lt;p&gt;Use one of the links below to know more about the&amp;nbsp;project:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Google Summer of Code &lt;a class="reference external" href="https://summerofcode.withgoogle.com/projects/#5809403503575040"&gt;project page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://github.com/p5py/p5"&gt;code repository&lt;/a&gt; on&amp;nbsp;Github.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://p5.readthedocs.io/"&gt;project documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&amp;#8230;and the &lt;a class="reference external" href="https://p5py.github.io/"&gt;website for the project&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I plan to use this blog to post ocassional updates about the
development process/other things; there are &lt;a class="reference external" href="https://abhikpal.github.io/feeds/all.rss.xml"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt;/&lt;a class="reference external" href="https://abhikpal.github.io/feeds/all.atom.xml"&gt;&lt;span class="caps"&gt;ATOM&lt;/span&gt;&lt;/a&gt; feeds you can
subscribe to if you want to follow&amp;nbsp;along.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d rather play around with &lt;tt class="docutils literal"&gt;p5&lt;/tt&gt;, I&amp;#8217;ve uploaded a &lt;a class="reference external" href="https://pypi.python.org/pypi/p5"&gt;developmental
release&lt;/a&gt; to the Python Package Index. The installation instructions are
in the documentation page and the Github &lt;a class="reference external" href="https://github.com/p5py/p5/blob/master/README.rst"&gt;&lt;span class="caps"&gt;README&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;—&lt;/p&gt;
&lt;p&gt;Abhik&lt;/p&gt;
</content><category term="python"></category><category term="processing"></category><category term="gsoc"></category><category term="p5"></category></entry><entry><title>A Python Progress Tracker for Kindle</title><link href="http://abhikpal.github.io/blog/2015/07/03/a-python-progress-tracker-for-kindle" rel="alternate"></link><published>2015-07-03T00:46:12+05:30</published><updated>2015-07-03T00:46:12+05:30</updated><author><name>Abhik Pal</name></author><id>tag:abhikpal.github.io,2015-07-03:/blog/2015/07/03/a-python-progress-tracker-for-kindle</id><summary type="html">&lt;p&gt;Is our reading pace consistent throughout a book? Or are there parts where we speed up and parts where we slow down? Here is a mini Python hack to investigate that using Amazon&amp;#8217;s&amp;nbsp;kindle.&lt;/p&gt;
&lt;p&gt;The final results are graphs that help you&amp;nbsp;answer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How fast did I read that&amp;nbsp;book?&lt;/li&gt;
&lt;li&gt;How long was each reading&amp;nbsp;session?&lt;/li&gt;
&lt;li&gt;Where did I take the most number of&amp;nbsp;notes/highlights/bookmarks?&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="sample run on my clippings from Stoker's 'Dracula'" src="/images/PyProgTracker.png" /&gt;
&lt;p&gt;This should have been slightly easier. Unfortunately, Amazon doesn&amp;#8217;t allow you to write custom apps for your own Kindle. Which means that the only way to add this feature was jailbreak …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Is our reading pace consistent throughout a book? Or are there parts where we speed up and parts where we slow down? Here is a mini Python hack to investigate that using Amazon&amp;#8217;s&amp;nbsp;kindle.&lt;/p&gt;
&lt;p&gt;The final results are graphs that help you&amp;nbsp;answer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How fast did I read that&amp;nbsp;book?&lt;/li&gt;
&lt;li&gt;How long was each reading&amp;nbsp;session?&lt;/li&gt;
&lt;li&gt;Where did I take the most number of&amp;nbsp;notes/highlights/bookmarks?&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="sample run on my clippings from Stoker's 'Dracula'" src="/images/PyProgTracker.png" /&gt;
&lt;p&gt;This should have been slightly easier. Unfortunately, Amazon doesn&amp;#8217;t allow you to write custom apps for your own Kindle. Which means that the only way to add this feature was jailbreak my small little device and possibly risk bricking it. Reluctant to try that path first, I decide to look for&amp;nbsp;alternatives.&lt;/p&gt;
&lt;p&gt;The result was a Python script that does the plotting for you (screenshot above). Once the kindle is connected, a bash script gets the &lt;tt class="docutils literal"&gt;My Clippings.txt&lt;/tt&gt; file from your Kindle. The python script then takes this file, uses some regular expressions to locate the required timestamps, and finally uses these times stamps to plot your progress through a book &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The script has been refactored and now hides resides &lt;a class="reference external" href="https://github.com/abhikpal/ebook_utils"&gt;here&lt;/a&gt; &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;. One thing though, this only works if you consistently take notes on your kindle, highight stuff, or bookmark&amp;nbsp;things.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I guess the project is simple enough to be implemented in JavaScript and I should try porting it to use d3.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It&amp;#8217;s quite sad; &lt;tt class="docutils literal"&gt;ebook_utils&lt;/tt&gt; was the best name I could come up with.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="python"></category><category term="matplotlib"></category><category term="books"></category></entry><entry><title>A Minimal Slider Class for Processing</title><link href="http://abhikpal.github.io/blog/2014/02/20/a-minimal-slider-class-for-processing" rel="alternate"></link><published>2014-02-20T16:49:12+05:30</published><updated>2014-02-20T16:49:12+05:30</updated><author><name>Abhik Pal</name></author><id>tag:abhikpal.github.io,2014-02-20:/blog/2014/02/20/a-minimal-slider-class-for-processing</id><summary type="html">&lt;p&gt;While putting together my music visualizer, I discovered that there was an inconsistency in the colour values I was sending to the Arduino and the actual colour that the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt;&amp;nbsp;produced.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="running the slider class" src="/images/slider.png" /&gt;
&lt;p class="caption"&gt;Running the slider&amp;nbsp;class&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The red channel of the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; seemed to often dominate the other channels and I guess it&amp;#8217;s probably due to scattering. Since the color red happens to scatter the most, it makes your whole thing inconsistent. The problem is similar to what happens when a picture taken from your camera looks &lt;em&gt;slightly&lt;/em&gt; different on your computer screen and looks ridiculously stupid when …&lt;/p&gt;</summary><content type="html">&lt;p&gt;While putting together my music visualizer, I discovered that there was an inconsistency in the colour values I was sending to the Arduino and the actual colour that the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt;&amp;nbsp;produced.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="running the slider class" src="/images/slider.png" /&gt;
&lt;p class="caption"&gt;Running the slider&amp;nbsp;class&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The red channel of the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; seemed to often dominate the other channels and I guess it&amp;#8217;s probably due to scattering. Since the color red happens to scatter the most, it makes your whole thing inconsistent. The problem is similar to what happens when a picture taken from your camera looks &lt;em&gt;slightly&lt;/em&gt; different on your computer screen and looks ridiculously stupid when printed out of a inkjet (more on this (+ details) can be found in the  &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Color_management"&gt;Color Management Wikipedia article&lt;/a&gt; or  &lt;a class="reference external" href="http://www.ledsmagazine.com/articles/print/volume-10/issue-6/features/understand-rgb-led-mixing-ratios-to-realize-optimal-color-in-signs-and-displays-magazine.html"&gt;this &amp;#8216;Leds Magazine&amp;#8217; piece&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;To play around with this issue, I ended up writing a simple sketch that lets you select the colours on your computer, send them to your Arduino and see the corresponding color on your &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The sketch uses a custom &lt;em&gt;slider&lt;/em&gt; class that facilitates to facilitate the drawing, and data retrival from the sliders. You can use it for other exciting things if you want a stupidly simple slider. The whole thing is around 60 lines long and is produced below (save it as &lt;tt class="docutils literal"&gt;slider.pde&lt;/tt&gt; inside the same folder containing your main&amp;nbsp;script):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;slider&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// constructor takes initial color, location (x, y) and&lt;/span&gt;
  &lt;span class="c1"&gt;// position of the slider&lt;/span&gt;
  &lt;span class="n"&gt;slider&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sliderCol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;posX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;posY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;drawSlider&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// draws the slider on the screen&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;drawSlider&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sliderCol&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posX&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// updates color of the slider to the given value&lt;/span&gt;
  &lt;span class="c1"&gt;// and changes position of the slider accordingly&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sliderCol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;drawSlider&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mousePressed&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;posX&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;sliderVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;300.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;255.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;posX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// return the position of the slider&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;getVal&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sliderVal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;sliderCol&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;posX&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;posY&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;sliderVal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here are the arduino and processing sketches that use this class (because people are just too lazy to go check github and get the code). The resulting interface should be something very close to the screenshot given&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;The code that should go inside your arduino (change the pins&amp;nbsp;accordingly):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * RGB Color Mixer&lt;/span&gt;
&lt;span class="cm"&gt; * Takes value from the Serial port,&lt;/span&gt;
&lt;span class="cm"&gt; * saves to an array, and writes&lt;/span&gt;
&lt;span class="cm"&gt; * corresponding values to the RGB LED.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Abhik Pal | 11:40, 19th Feb 2014&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="c1"&gt;// Positions of the R, G and B values&lt;/span&gt;
&lt;span class="c1"&gt;// on the array&lt;/span&gt;
&lt;span class="cp"&gt;#define RED     0&lt;/span&gt;
&lt;span class="cp"&gt;#define GREEN   1&lt;/span&gt;
&lt;span class="cp"&gt;#define BLUE    2&lt;/span&gt;

&lt;span class="c1"&gt;// maximum values to be stored&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// the array to store the values&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxVal&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// a var. to keep track of the inserted&lt;/span&gt;
&lt;span class="c1"&gt;// values&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;// arduino pins to which LEDs are attached&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// setting up the leds as OUTPUT&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// opening up the serial port @ 9600&lt;/span&gt;
    &lt;span class="c1"&gt;// bauds&lt;/span&gt;
    &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// checking if the serial buffer contains&lt;/span&gt;
    &lt;span class="c1"&gt;// anything&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// adding the value to the array&lt;/span&gt;
        &lt;span class="c1"&gt;// (value subtracted from 255 as I&amp;#39;ve got&lt;/span&gt;
        &lt;span class="c1"&gt;// common anode RGB LED)&lt;/span&gt;
        &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//incrementing the array counter&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// if the counter approaches the maxVal&lt;/span&gt;
        &lt;span class="c1"&gt;// set it to zero i.e. at the beginning of the&lt;/span&gt;
        &lt;span class="c1"&gt;// array.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;maxVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// write proper values to the LEDs&lt;/span&gt;
    &lt;span class="n"&gt;analogWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;analogWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;analogWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BLUE&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And similarly, change the ports and stuff in the Processing code&amp;nbsp;below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * RGB Color Mixer Processing Sketch&lt;/span&gt;
&lt;span class="cm"&gt; * Draws sliders on the screen and sends values to the Arduino&lt;/span&gt;
&lt;span class="cm"&gt; * Gives a preview of the color and cliking the preview prints out&lt;/span&gt;
&lt;span class="cm"&gt; * the RGB values.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Abhik Pal | 11:49, 19th Feb 2014&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="c1"&gt;// import the Serial library&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;processing.serial.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// making some sliders&lt;/span&gt;
&lt;span class="n"&gt;slider&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;slider&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;slider&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ... and a Serial port&lt;/span&gt;
&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// initializing the RGB values to zero&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;redVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;greenVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;blueVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Setting up the screen&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;850&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// opening up the Serial port, change the &amp;quot;COM5&amp;quot; and baud rate&lt;/span&gt;
  &lt;span class="c1"&gt;// to suit your needs&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// initializing the sliders&lt;/span&gt;
  &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;slider&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;slider&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;slider&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// clear everything&lt;/span&gt;
  &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// update the slider position&lt;/span&gt;
  &lt;span class="c1"&gt;// change color to the current color&lt;/span&gt;
  &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greenVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blueVal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// store the slider values in respective variables&lt;/span&gt;
  &lt;span class="n"&gt;redVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getVal&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;greenVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getVal&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;blueVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getVal&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// write out the values to the Arduino&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redVal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greenVal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blueVal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;


  &lt;span class="c1"&gt;// draw the preview window&lt;/span&gt;
  &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greenVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blueVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// print out the values when the mouse is clicked and&lt;/span&gt;
&lt;span class="c1"&gt;// released inside the preview area&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;mouseReleased&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R:\t&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;redVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; G:\t&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;greenVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; B:\t&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;blueVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of the code here is also hosted on github and can be found in the repo thing for this blog. There are the Arduino and the Porcessing forums if you end up doing something interesting with&amp;nbsp;this.&lt;/p&gt;
</content><category term="arduino"></category><category term="processing"></category></entry><entry><title>Github</title><link href="http://abhikpal.github.io/blog/2014/02/20/github" rel="alternate"></link><published>2014-02-20T13:10:53+05:30</published><updated>2016-07-29T00:00:00+05:30</updated><author><name>Abhik Pal</name></author><id>tag:abhikpal.github.io,2014-02-20:/blog/2014/02/20/github</id><summary type="html">&lt;p class="first last"&gt;I finally moved to Github. Here are two screenshots and some&amp;nbsp;thoughts.&lt;/p&gt;
</summary><content type="html">&lt;blockquote class="epigraph"&gt;
&lt;p&gt;This is here for historical&amp;nbsp;reasons.&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;July 29th&amp;nbsp;2016&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally, after going through the Sparkfun tutorial at &lt;a class="reference external" href="https://learn.sparkfun.com/tutorials/using-github/all"&gt;https://learn.sparkfun.com/tutorials/using-github/all&lt;/a&gt; I was able to set up my Github Repo for this blog. It resides at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[&lt;span class="caps"&gt;DEAD&lt;/span&gt;-&lt;span class="caps"&gt;LINK&lt;/span&gt;-&lt;span class="caps"&gt;REMOVED&lt;/span&gt;]&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;img alt="Github screenshot 2" src="/images/github2.png" /&gt;
&lt;p&gt;All codes and snippets on this blog, from now, will go to this repo instead of the gist which I used to use earlier. The repo also contains the custom scripts and style-sheets used in this blog ready to be&amp;nbsp;hacked.&lt;/p&gt;
&lt;img alt="Github screenshot 1" src="/images/github1.png" /&gt;
</content><category term="blog-update"></category></entry><entry><title>Music Visualizer Upgraded</title><link href="http://abhikpal.github.io/blog/2014/02/01/music-visualizer-upgraded" rel="alternate"></link><published>2014-02-01T15:35:23+05:30</published><updated>2014-02-01T15:35:23+05:30</updated><author><name>Abhik Pal</name></author><id>tag:abhikpal.github.io,2014-02-01:/blog/2014/02/01/music-visualizer-upgraded</id><summary type="html">&lt;p class="first last"&gt;Polishing the last music visualizer project to grab audio data from the computer&amp;#8217;s output channel using the inbuilt &amp;#8216;Stereo Mix&amp;#8217; recording device in&amp;nbsp;Windows.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I had made a simple &lt;a class="reference external" href="http://abhikpal.github.io/blog/2014/01/16/simple-music-visualizer"&gt;music visualizer&lt;/a&gt; and it had its own set of drawbacks; the most irritating one being that whenever I wanted to play a file I would have to follow the absurd ritual of putting a the new file in the folder containing the Processing sketch, change code, run the code again and then see the file &amp;#8220;visualized&amp;#8221;. I definitely needed a way to make the Processing sketch automatically detect any sound being played and then send the required values to the&amp;nbsp;Arduino.&lt;/p&gt;
&lt;p&gt;I used the method as &lt;a class="reference external" href="http://forum.arduino.cc/index.php?topic=211332.0"&gt;described&lt;/a&gt; by Arduino forum user &lt;a class="reference external" href="http://forum.arduino.cc/index.php?action=profile;u=5310"&gt;macegr&lt;/a&gt; who did a similar &lt;a class="reference external" href="http://www.macetech.com/blog/node/111"&gt;project&lt;/a&gt; back in&amp;nbsp;2011.&lt;/p&gt;
&lt;p&gt;To achieve what we want to do i.e. respond to sound events from any program we will redirect the output to a special kind of recording mode available in Windows (I don&amp;#8217;t know about other operating systems, use Google) called &amp;#8220;Stereo Mix&amp;#8221;. It&amp;#8217;s main purpose in life is to fetch any sound from the output channels and then use the same sound to act as input. It is something like placing a microphone against your speaker to record whatever sound your speaker produces; just with negligible noise and without any special&amp;nbsp;hardware.&lt;/p&gt;
&lt;div class="section" id="setting-up-stereo-mix"&gt;
&lt;h2&gt;Setting up Stereo&amp;nbsp;Mix&lt;/h2&gt;
&lt;img alt="Step 2" src="/images/music_visualizer_2/stereo_mix_2.png" style="width: 50%;" /&gt;
&lt;p&gt;The setup should be straight forward. Start by right click on the speaker icon in the taskbar and select &amp;#8216;Recording Devices&amp;#8217; from the menu that&amp;nbsp;appears.&lt;/p&gt;
&lt;img alt="Step 3" src="/images/music_visualizer_2/stereo_mix_3.png" style="width: 50%;" /&gt;
&lt;p&gt;You will see a window similar to the one shown&amp;nbsp;above.&lt;/p&gt;
&lt;img alt="Step 4" src="/images/music_visualizer_2/stereo_mix_4.png" style="width: 50%;" /&gt;
&lt;p&gt;Right click on any blank area and select &amp;#8220;Show Disabled Devices&amp;#8221;. This should give you a list of&amp;nbsp;devices.&lt;/p&gt;
&lt;img alt="Step 5" src="/images/music_visualizer_2/stereo_mix_5.png" style="width: 50%;" /&gt;
&lt;p&gt;Right click on &amp;#8220;Stereo Mix&amp;#8221; and select&amp;nbsp;&amp;#8220;Enable&amp;#8221;&lt;/p&gt;
&lt;img alt="Step 6" src="/images/music_visualizer_2/stereo_mix_6.png" style="width: 50%;" /&gt;
&lt;p&gt;Now, click on &amp;#8220;Stereo Mix&amp;#8221; to select it and then click on the &amp;#8220;Set Default&amp;#8221;&amp;nbsp;button.&lt;/p&gt;
&lt;img alt="Step 7" src="/images/music_visualizer_2/stereo_mix_7.png" style="width: 50%;" /&gt;
&lt;p&gt;You should see the check mark shift from you default device to &amp;#8220;Stereo&amp;nbsp;Mix&amp;#8221;&lt;/p&gt;
&lt;img alt="Step 8" src="/images/music_visualizer_2/stereo_mix_8.png" style="width: 75%;" /&gt;
&lt;p&gt;To ensure that you have done everything right, open up a sound file and play it. You should see the sound level indicator near the &amp;#8220;Stereo Mix&amp;#8221; icon change according to whatever you are&amp;nbsp;playing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="processing-code"&gt;
&lt;h2&gt;Processing&amp;nbsp;Code&lt;/h2&gt;
&lt;p&gt;Most of the code remains the same. The parts handling the audio channels now take input from the computer&amp;#8217;s recording device instead of an mp3 file in the&amp;nbsp;folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; *  Music Visualizer ver2&lt;/span&gt;
&lt;span class="cm"&gt; *  This sketch extracts values from the input audio stream&lt;/span&gt;
&lt;span class="cm"&gt; *  which happens to give the same values as our output&lt;/span&gt;
&lt;span class="cm"&gt; *  stream as &amp;quot;Stereo Mix&amp;quot; has been set as the default device.&lt;/span&gt;
&lt;span class="cm"&gt; *  The values are used to draw waveforms representing the&lt;/span&gt;
&lt;span class="cm"&gt; *  average, left and right channels and send the values to an&lt;/span&gt;
&lt;span class="cm"&gt; *  Arduino which changes the brightness of a LED.&lt;/span&gt;
&lt;span class="cm"&gt; *  This is an upgrade to the previous Music Visualizer Project&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; *  Code by:&lt;/span&gt;
&lt;span class="cm"&gt; *  Abhik Pal; 19th Jan 2014, 14:03&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="c1"&gt;// Import the Minim and Serial Libraries&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ddf.minim.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;processing.serial.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// creating the required objects&lt;/span&gt;
&lt;span class="n"&gt;Minim&lt;/span&gt; &lt;span class="n"&gt;minim&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;AudioInput&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// This value will be sent to the Arduino&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sendVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//The P3D mode is trivial, it just speeds up things&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;P3D&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;minim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Minim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Setting &amp;#39;in&amp;#39; to be the current input stream&lt;/span&gt;
  &lt;span class="c1"&gt;// of audio. This will be equivalent to the output&lt;/span&gt;
  &lt;span class="c1"&gt;// stream as we have selected &amp;#39;Stereo Mix&amp;#39; as our&lt;/span&gt;
  &lt;span class="c1"&gt;// default recording device&lt;/span&gt;
  &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLineIn&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// change the COM port to match your Arduino&amp;#39;s COM port&lt;/span&gt;
  &lt;span class="c1"&gt;// change the baud Rate if you have used someting&lt;/span&gt;
  &lt;span class="c1"&gt;// different from 9600 bauds.&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// clearing the screen&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bufferSize&lt;/span&gt;&lt;span class="o"&gt;()/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)*&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// self explanatory variables ...  :)&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;nextRightVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;leftVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;nextLeftVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;avgVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;nextAvgVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextLeftVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nextRightVal&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// draw some waveforms&lt;/span&gt;
    &lt;span class="c1"&gt;// the average values&amp;#39; waveform&lt;/span&gt;
    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;avgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nextAvgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// waveforms for the left and right audio channels&lt;/span&gt;
    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;225&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;leftVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;225&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nextLeftVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nextRightVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// sendVal is the average of the left and right channels&lt;/span&gt;
    &lt;span class="n"&gt;sendVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;avgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sendVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sendVal&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// draw a rectangle to show the value to be sent&lt;/span&gt;
    &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rectLen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sendVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rectLen&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Send the required values to the Arduino&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sendVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Upload the Dimmer example to your Arduino board and run the Processing sketch. Turn up the volume and try playing some sound files on your computer, they need not be located in the same folder as your Processing sketch. You should see the wave-forms in the Processing sketch change and your &lt;span class="caps"&gt;LED&lt;/span&gt; flash&amp;nbsp;accordingly.&lt;/p&gt;
&lt;img alt="Final Step" src="/images/music_visualizer_2/main.png" /&gt;
&lt;/div&gt;
</content><category term="arduino"></category><category term="processing"></category></entry><entry><title>Simple Music Visualizer</title><link href="http://abhikpal.github.io/blog/2014/01/16/simple-music-visualizer" rel="alternate"></link><published>2014-01-16T22:05:32+05:30</published><updated>2014-01-16T22:05:32+05:30</updated><author><name>Abhik Pal</name></author><id>tag:abhikpal.github.io,2014-01-16:/blog/2014/01/16/simple-music-visualizer</id><summary type="html">&lt;p class="first last"&gt;A simple Arduino-Processing based music visualizer that puts the glowdrons to some good&amp;nbsp;use.&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If you are new to serial communication between Arduino and Processing you refer to the (slightly long) tutorial &lt;a class="reference external" href="http://abhikpal.github.io/blog/2013/10/05/getting-started-with-arduino-processing-serial-communication"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In my last post I made a &lt;a class="reference external" href="http://abhikpal.github.io/blog/2014/01/01/paper-glowdrons"&gt;glowing dodecahedron&lt;/a&gt; out of paper and some glue. In this project I convert the same dodecahedron to make a super simple music visualizer using Processing and&amp;nbsp;Arduino.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="dodecahedron" src="/images/music_visualizer/dodec.jpg" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;p&gt;This project uses only one color of the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; i.e., you can substitute the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; with a usual &lt;span class="caps"&gt;LED&lt;/span&gt;. (Using the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt;? The wiring diagrams are on the &lt;a class="reference external" href="http://abhikpal.github.io/blog/2014/01/01/paper-glowdrons"&gt;dodecahedron post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is way simpler than Adafruit&amp;#8217;s &lt;a class="reference external" href="http://learn.adafruit.com/piccolo"&gt;Piccolo&lt;/a&gt; and all it does is change the brightness of the &lt;span class="caps"&gt;LED&lt;/span&gt; based on average of the values sent to the left and right audio channels. The processing sketch uses the Minim library (included by default in recent versions of Processing) to get the values out of the audio buffer and make some (weird?) visual on the&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;We will use the dimmer sketch to convert the values sent by the processing sketch to the equivalent &lt;span class="caps"&gt;LED&lt;/span&gt; brightness. You can upload the example sketch at &amp;#8216;File &amp;gt;&amp;gt; Examples &amp;gt;&amp;gt; 04.Communication &amp;gt;&amp;gt; Dimmer&amp;#8217; to your Arduino to do this for you. Make sure to change the  &lt;tt class="docutils literal"&gt;ledPin&lt;/tt&gt; variable to the pin number your &lt;span class="caps"&gt;LED&lt;/span&gt; is connected to. Compile and upload the sketch. We can now move to the Processing&amp;nbsp;sketch.&lt;/p&gt;
&lt;p&gt;Here is the Processing sketch that we&amp;#8217;ll be&amp;nbsp;using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * A Simple Monochromatic sound Visualizer&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * This sketch plays a sound and sends the average&lt;/span&gt;
&lt;span class="cm"&gt; * values in the audio buffer as integer values to the arduino&lt;/span&gt;
&lt;span class="cm"&gt; * where an LED changes its brightness based on the values sent.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * This project is an extension to the &amp;quot;Glowing Dodecahedron&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt; * project and adds a bit of functionality to the dodecahedron.&lt;/span&gt;
&lt;span class="cm"&gt; * The &amp;quot;Glowing Dodecahedron&amp;quot; project is available with instructions&lt;/span&gt;
&lt;span class="cm"&gt; * and required circuit diagrams at:&lt;/span&gt;
&lt;span class="cm"&gt; * http://theblubot.blogspot.com/2014/01/glowing-dodecahedron.html&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * design and code by:&lt;/span&gt;
&lt;span class="cm"&gt; * Abhik Pal. 10th January 2014, 23:13&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="c1"&gt;// Importing the Minim and Serial libraries&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ddf.minim.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;processing.serial.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// creating required objects&lt;/span&gt;
&lt;span class="n"&gt;AudioPlayer&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Minim&lt;/span&gt; &lt;span class="n"&gt;minim&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// variable to store the value to be sent&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sendVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// variable to store whether the song is being played or not&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// setting the size to be the current display size&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;displayWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;displayHeight&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// setting everything up!&lt;/span&gt;
  &lt;span class="n"&gt;minim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Minim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// make sure to change the stuff inside the&lt;/span&gt;
  &lt;span class="c1"&gt;// &amp;quot;quotes&amp;quot; to mathch the file you want to play&lt;/span&gt;
  &lt;span class="c1"&gt;// here I&amp;#39;m playing &amp;quot;song.mp3&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;song&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// change the COM port to match your Arduino&amp;#39;s COM port&lt;/span&gt;
  &lt;span class="c1"&gt;// change the baud Rate if you have used someting&lt;/span&gt;
  &lt;span class="c1"&gt;// different from 9600 bauds.&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// clearing out the screen by creating a rectangle&lt;/span&gt;
  &lt;span class="c1"&gt;// having dimentions of the screen size.&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// this loop is used to extract and display visuals&lt;/span&gt;
  &lt;span class="c1"&gt;// based on the values present int the audio buffer&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bufferSize&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// variables to store the right and left audio values&lt;/span&gt;
    &lt;span class="c1"&gt;// i.e. sound being sent to each left and right speaker.&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;leftVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// the next few lines account for the pattern being&lt;/span&gt;
    &lt;span class="c1"&gt;// displayed on the screen&lt;/span&gt;
    &lt;span class="n"&gt;pushMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radians&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bufferSize&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;

    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;leftVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;leftVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;popMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// variable to store the average of the left and right channel&lt;/span&gt;
    &lt;span class="c1"&gt;// audio.&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;avgVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// display a graph based on the average values&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)-&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;avgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)-&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;avgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// a value to temprarily store the value to be sent.&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tempVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;avgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;tempVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempVal&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// setting the value to be sent to be equal to the&lt;/span&gt;
    &lt;span class="c1"&gt;// temporary value.&lt;/span&gt;
    &lt;span class="n"&gt;sendVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempVal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// send out the value to your Arduino&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sendVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// a bar indicating the sent values&lt;/span&gt;
  &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rectLen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sendVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rectLen&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// function to change play/pause the song each time the&lt;/span&gt;
&lt;span class="c1"&gt;// left mouse button is pressed.&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;mousePressed&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// if the song is already being played&lt;/span&gt;
  &lt;span class="c1"&gt;// we pause it and change the value of isPlaying variable&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isPlaying&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pause&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;isPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// and if it is paused we play it and change &amp;#39;isPlaying&amp;#39; accordingly&lt;/span&gt;
  &lt;span class="c1"&gt;// :P pretty simple right?&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;play&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;isPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before running the sketch you need to save it and place a sound file in the same folder that has your sketch. Also, change &lt;tt class="docutils literal"&gt;&amp;quot;song.mp3&amp;quot;&lt;/tt&gt; in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;song&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to the file that you want to play. And yes, make changes to the &lt;span class="caps"&gt;COM&lt;/span&gt; port accordingly in the following&amp;nbsp;line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Connect your Arduino and run your code in &amp;#8216;Present&amp;#8217; mode using the keyboard shortcut &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt; (or by navigating to &amp;#8216;Sketch &amp;gt;&amp;gt; Present&amp;#8217; in the Processing &lt;span class="caps"&gt;IDE&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Once you run your code, you need to click anywhere in the screen to play/pause the song. If the song is being played; you would see something that resembles the screenshot given below. The white bar on the top indicates the value being sent, the green graph on the bottom shows the average values in the audio buffer and the central visual changes according to the values in the left and right audio&amp;nbsp;channels.&lt;/p&gt;
&lt;img alt="processing sketch screenshot" src="/images/music_visualizer/screenshot_4.png" /&gt;
&lt;div class="admonition admonition-update"&gt;
&lt;p class="first admonition-title"&gt;update&lt;/p&gt;
&lt;p class="last"&gt;Placing the sound file you want to play in the sketch folder everytime can get very tedious very soon. The &lt;a class="reference external" href="http://abhikpal.github.io/blog/2014/02/01/music-visualizer-upgraded"&gt;upgraded version of the visualizer&lt;/a&gt; uses the &amp;#8216;Stereo Mix&amp;#8217; recording device to grab eveything from your machine&amp;#8217;s output audio stream, hence removing the unnessary hassle. The upgraded version can be found&amp;nbsp;here.&lt;/p&gt;
&lt;/div&gt;
</content><category term="arduino"></category><category term="processing"></category></entry></feed>