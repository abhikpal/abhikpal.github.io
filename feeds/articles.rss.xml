<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Abhik Pal's Weblog - articles</title><link>http://abhikpal.github.io/</link><description></description><lastBuildDate>Fri, 29 Jul 2016 00:00:00 +0530</lastBuildDate><item><title>A Python Progress Tracker for Kindle</title><link>http://abhikpal.github.io/blog/2015/07/03/a-python-progress-tracker-for-kindle</link><description>&lt;p&gt;Is our reading pace consistent throughout a book? Or are there parts where we speed up and parts where we slow down? Here is a mini Python hack to investigate that using Amazon&amp;#8217;s&amp;nbsp;kindle.&lt;/p&gt;
&lt;p&gt;The final results are graphs that help you&amp;nbsp;answer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How fast did I read that&amp;nbsp;book?&lt;/li&gt;
&lt;li&gt;How long was each reading&amp;nbsp;session?&lt;/li&gt;
&lt;li&gt;Where did I take the most number of&amp;nbsp;notes/highlights/bookmarks?&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="sample run on my clippings from Stoker's 'Dracula'" src="/images/PyProgTracker.png" /&gt;
&lt;p&gt;This should have been slightly easier. Unfortunately, Amazon doesn&amp;#8217;t allow you to write custom apps for your own Kindle. Which means that the only way to add this feature was jailbreak my small little device and possibly risk bricking it. Reluctant to try that path first, I decide to look for&amp;nbsp;alternatives.&lt;/p&gt;
&lt;p&gt;The result was a Python script that does the plotting for you (screenshot above). Once the kindle is connected, a bash script gets the &lt;tt class="docutils literal"&gt;My Clippings.txt&lt;/tt&gt; file from your Kindle. The python script then takes this file, uses some regular expressions to locate the required timestamps, and finally uses these times stamps to plot your progress through a book &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The script has been refactored and now hides resides &lt;a class="reference external" href="https://github.com/abhikpal/ebook_utils"&gt;here&lt;/a&gt; &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;. One thing though, this only works if you consistently take notes on your kindle, highight stuff, or bookmark&amp;nbsp;things.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I guess the project is simple enough to be implemented in JavaScript and I should try porting it to use d3.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It&amp;#8217;s quite sad; &lt;tt class="docutils literal"&gt;ebook_utils&lt;/tt&gt; was the best name I could come up with.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhik Pal</dc:creator><pubDate>Fri, 03 Jul 2015 00:46:12 +0530</pubDate><guid isPermaLink="false">tag:abhikpal.github.io,2015-07-03:/blog/2015/07/03/a-python-progress-tracker-for-kindle</guid><category>python</category><category>matplotlib</category><category>books</category></item><item><title>A Minimal Slider Class for Processing</title><link>http://abhikpal.github.io/blog/2014/02/20/a-minimal-slider-class-for-processing</link><description>&lt;p&gt;While putting together my music visualizer, I discovered that there was an inconsistency in the colour values I was sending to the Arduino and the actual colour that the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt;&amp;nbsp;produced.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="running the slider class" src="/images/slider.png" /&gt;
&lt;p class="caption"&gt;Running the slider&amp;nbsp;class&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The red channel of the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; seemed to often dominate the other channels and I guess it&amp;#8217;s probably due to scattering. Since the color red happens to scatter the most, it makes your whole thing inconsistent. The problem is similar to what happens when a picture taken from your camera looks &lt;em&gt;slightly&lt;/em&gt; different on your computer screen and looks ridiculously stupid when printed out of a inkjet (more on this (+ details) can be found in the  &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Color_management"&gt;Color Management Wikipedia article&lt;/a&gt; or  &lt;a class="reference external" href="http://www.ledsmagazine.com/articles/print/volume-10/issue-6/features/understand-rgb-led-mixing-ratios-to-realize-optimal-color-in-signs-and-displays-magazine.html"&gt;this &amp;#8216;Leds Magazine&amp;#8217; piece&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;To play around with this issue, I ended up writing a simple sketch that lets you select the colours on your computer, send them to your Arduino and see the corresponding color on your &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The sketch uses a custom &lt;em&gt;slider&lt;/em&gt; class that facilitates to facilitate the drawing, and data retrival from the sliders. You can use it for other exciting things if you want a stupidly simple slider. The whole thing is around 60 lines long and is produced below (save it as &lt;tt class="docutils literal"&gt;slider.pde&lt;/tt&gt; inside the same folder containing your main&amp;nbsp;script):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;slider&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// constructor takes initial color, location (x, y) and&lt;/span&gt;
  &lt;span class="c1"&gt;// position of the slider&lt;/span&gt;
  &lt;span class="n"&gt;slider&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sliderCol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;posX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;posY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;drawSlider&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// draws the slider on the screen&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;drawSlider&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sliderCol&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posX&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// updates color of the slider to the given value&lt;/span&gt;
  &lt;span class="c1"&gt;// and changes position of the slider accordingly&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sliderCol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;drawSlider&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mousePressed&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;posX&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;sliderVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;300.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;255.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;posX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// return the position of the slider&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;getVal&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sliderVal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;sliderCol&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;posX&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;posY&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;sliderVal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here are the arduino and processing sketches that use this class (because people are just too lazy to go check github and get the code). The resulting interface should be something very close to the screenshot given&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;The code that should go inside your arduino (change the pins&amp;nbsp;accordingly):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * RGB Color Mixer&lt;/span&gt;
&lt;span class="cm"&gt; * Takes value from the Serial port,&lt;/span&gt;
&lt;span class="cm"&gt; * saves to an array, and writes&lt;/span&gt;
&lt;span class="cm"&gt; * corresponding values to the RGB LED.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Abhik Pal | 11:40, 19th Feb 2014&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="c1"&gt;// Positions of the R, G and B values&lt;/span&gt;
&lt;span class="c1"&gt;// on the array&lt;/span&gt;
&lt;span class="cp"&gt;#define RED     0&lt;/span&gt;
&lt;span class="cp"&gt;#define GREEN   1&lt;/span&gt;
&lt;span class="cp"&gt;#define BLUE    2&lt;/span&gt;

&lt;span class="c1"&gt;// maximum values to be stored&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// the array to store the values&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxVal&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// a var. to keep track of the inserted&lt;/span&gt;
&lt;span class="c1"&gt;// values&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;// arduino pins to which LEDs are attached&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// setting up the leds as OUTPUT&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// opening up the serial port @ 9600&lt;/span&gt;
    &lt;span class="c1"&gt;// bauds&lt;/span&gt;
    &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// checking if the serial buffer contains&lt;/span&gt;
    &lt;span class="c1"&gt;// anything&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// adding the value to the array&lt;/span&gt;
        &lt;span class="c1"&gt;// (value subtracted from 255 as I&amp;#39;ve got&lt;/span&gt;
        &lt;span class="c1"&gt;// common anode RGB LED)&lt;/span&gt;
        &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//incrementing the array counter&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// if the counter approaches the maxVal&lt;/span&gt;
        &lt;span class="c1"&gt;// set it to zero i.e. at the beginning of the&lt;/span&gt;
        &lt;span class="c1"&gt;// array.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;maxVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// write proper values to the LEDs&lt;/span&gt;
    &lt;span class="n"&gt;analogWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;analogWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;analogWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BLUE&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And similarly, change the ports and stuff in the Processing code&amp;nbsp;below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * RGB Color Mixer Processing Sketch&lt;/span&gt;
&lt;span class="cm"&gt; * Draws sliders on the screen and sends values to the Arduino&lt;/span&gt;
&lt;span class="cm"&gt; * Gives a preview of the color and cliking the preview prints out&lt;/span&gt;
&lt;span class="cm"&gt; * the RGB values.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Abhik Pal | 11:49, 19th Feb 2014&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="c1"&gt;// import the Serial library&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;processing.serial.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// making some sliders&lt;/span&gt;
&lt;span class="n"&gt;slider&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;slider&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;slider&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ... and a Serial port&lt;/span&gt;
&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// initializing the RGB values to zero&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;redVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;greenVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;blueVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Setting up the screen&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;850&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// opening up the Serial port, change the &amp;quot;COM5&amp;quot; and baud rate&lt;/span&gt;
  &lt;span class="c1"&gt;// to suit your needs&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// initializing the sliders&lt;/span&gt;
  &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;slider&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;slider&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;slider&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// clear everything&lt;/span&gt;
  &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// update the slider position&lt;/span&gt;
  &lt;span class="c1"&gt;// change color to the current color&lt;/span&gt;
  &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greenVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blueVal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// store the slider values in respective variables&lt;/span&gt;
  &lt;span class="n"&gt;redVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getVal&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;greenVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getVal&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;blueVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getVal&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// write out the values to the Arduino&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redVal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greenVal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blueVal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;


  &lt;span class="c1"&gt;// draw the preview window&lt;/span&gt;
  &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greenVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blueVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// print out the values when the mouse is clicked and&lt;/span&gt;
&lt;span class="c1"&gt;// released inside the preview area&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;mouseReleased&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R:\t&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;redVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; G:\t&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;greenVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; B:\t&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;blueVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of the code here is also hosted on github and can be found in the repo thing for this blog. There are the Arduino and the Porcessing forums if you end up doing something interesting with&amp;nbsp;this.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhik Pal</dc:creator><pubDate>Thu, 20 Feb 2014 16:49:12 +0530</pubDate><guid isPermaLink="false">tag:abhikpal.github.io,2014-02-20:/blog/2014/02/20/a-minimal-slider-class-for-processing</guid><category>arduino</category><category>processing</category></item><item><title>Github</title><link>http://abhikpal.github.io/blog/2014/02/20/github</link><description>&lt;blockquote class="epigraph"&gt;
&lt;p&gt;This is here for historical&amp;nbsp;reasons.&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;July 29th&amp;nbsp;2016&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally, after going through the Sparkfun tutorial at &lt;a class="reference external" href="https://learn.sparkfun.com/tutorials/using-github/all"&gt;https://learn.sparkfun.com/tutorials/using-github/all&lt;/a&gt; I was able to set up my Github Repo for this blog. It resides at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[&lt;span class="caps"&gt;DEAD&lt;/span&gt;-&lt;span class="caps"&gt;LINK&lt;/span&gt;-&lt;span class="caps"&gt;REMOVED&lt;/span&gt;]&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;img alt="Github screenshot 2" src="/images/github2.png" /&gt;
&lt;p&gt;All codes and snippets on this blog, from now, will go to this repo instead of the gist which I used to use earlier. The repo also contains the custom scripts and style-sheets used in this blog ready to be&amp;nbsp;hacked.&lt;/p&gt;
&lt;img alt="Github screenshot 1" src="/images/github1.png" /&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhik Pal</dc:creator><pubDate>Thu, 20 Feb 2014 13:10:53 +0530</pubDate><guid isPermaLink="false">tag:abhikpal.github.io,2014-02-20:/blog/2014/02/20/github</guid><category>blog-update</category></item><item><title>Music Visualizer Upgraded</title><link>http://abhikpal.github.io/blog/2014/02/01/music-visualizer-upgraded</link><description>&lt;p&gt;I had made a simple &lt;a class="reference external" href="http://abhikpal.github.io/blog/2014/01/16/simple-music-visualizer"&gt;music visualizer&lt;/a&gt; and it had its own set of drawbacks; the most irritating one being that whenever I wanted to play a file I would have to follow the absurd ritual of putting a the new file in the folder containing the Processing sketch, change code, run the code again and then see the file &amp;#8220;visualized&amp;#8221;. I definitely needed a way to make the Processing sketch automatically detect any sound being played and then send the required values to the&amp;nbsp;Arduino.&lt;/p&gt;
&lt;p&gt;I used the method as &lt;a class="reference external" href="http://forum.arduino.cc/index.php?topic=211332.0"&gt;described&lt;/a&gt; by Arduino forum user &lt;a class="reference external" href="http://forum.arduino.cc/index.php?action=profile;u=5310"&gt;macegr&lt;/a&gt; who did a similar &lt;a class="reference external" href="http://www.macetech.com/blog/node/111"&gt;project&lt;/a&gt; back in&amp;nbsp;2011.&lt;/p&gt;
&lt;p&gt;To achieve what we want to do i.e. respond to sound events from any program we will redirect the output to a special kind of recording mode available in Windows (I don&amp;#8217;t know about other operating systems, use Google) called &amp;#8220;Stereo Mix&amp;#8221;. It&amp;#8217;s main purpose in life is to fetch any sound from the output channels and then use the same sound to act as input. It is something like placing a microphone against your speaker to record whatever sound your speaker produces; just with negligible noise and without any special&amp;nbsp;hardware.&lt;/p&gt;
&lt;div class="section" id="setting-up-stereo-mix"&gt;
&lt;h2&gt;Setting up Stereo&amp;nbsp;Mix&lt;/h2&gt;
&lt;img alt="Step 2" src="/images/music_visualizer_2/stereo_mix_2.png" style="width: 50%;" /&gt;
&lt;p&gt;The setup should be straight forward. Start by right click on the speaker icon in the taskbar and select &amp;#8216;Recording Devices&amp;#8217; from the menu that&amp;nbsp;appears.&lt;/p&gt;
&lt;img alt="Step 3" src="/images/music_visualizer_2/stereo_mix_3.png" style="width: 50%;" /&gt;
&lt;p&gt;You will see a window similar to the one shown&amp;nbsp;above.&lt;/p&gt;
&lt;img alt="Step 4" src="/images/music_visualizer_2/stereo_mix_4.png" style="width: 50%;" /&gt;
&lt;p&gt;Right click on any blank area and select &amp;#8220;Show Disabled Devices&amp;#8221;. This should give you a list of&amp;nbsp;devices.&lt;/p&gt;
&lt;img alt="Step 5" src="/images/music_visualizer_2/stereo_mix_5.png" style="width: 50%;" /&gt;
&lt;p&gt;Right click on &amp;#8220;Stereo Mix&amp;#8221; and select&amp;nbsp;&amp;#8220;Enable&amp;#8221;&lt;/p&gt;
&lt;img alt="Step 6" src="/images/music_visualizer_2/stereo_mix_6.png" style="width: 50%;" /&gt;
&lt;p&gt;Now, click on &amp;#8220;Stereo Mix&amp;#8221; to select it and then click on the &amp;#8220;Set Default&amp;#8221;&amp;nbsp;button.&lt;/p&gt;
&lt;img alt="Step 7" src="/images/music_visualizer_2/stereo_mix_7.png" style="width: 50%;" /&gt;
&lt;p&gt;You should see the check mark shift from you default device to &amp;#8220;Stereo&amp;nbsp;Mix&amp;#8221;&lt;/p&gt;
&lt;img alt="Step 8" src="/images/music_visualizer_2/stereo_mix_8.png" style="width: 75%;" /&gt;
&lt;p&gt;To ensure that you have done everything right, open up a sound file and play it. You should see the sound level indicator near the &amp;#8220;Stereo Mix&amp;#8221; icon change according to whatever you are&amp;nbsp;playing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="processing-code"&gt;
&lt;h2&gt;Processing&amp;nbsp;Code&lt;/h2&gt;
&lt;p&gt;Most of the code remains the same. The parts handling the audio channels now take input from the computer&amp;#8217;s recording device instead of an mp3 file in the&amp;nbsp;folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; *  Music Visualizer ver2&lt;/span&gt;
&lt;span class="cm"&gt; *  This sketch extracts values from the input audio stream&lt;/span&gt;
&lt;span class="cm"&gt; *  which happens to give the same values as our output&lt;/span&gt;
&lt;span class="cm"&gt; *  stream as &amp;quot;Stereo Mix&amp;quot; has been set as the default device.&lt;/span&gt;
&lt;span class="cm"&gt; *  The values are used to draw waveforms representing the&lt;/span&gt;
&lt;span class="cm"&gt; *  average, left and right channels and send the values to an&lt;/span&gt;
&lt;span class="cm"&gt; *  Arduino which changes the brightness of a LED.&lt;/span&gt;
&lt;span class="cm"&gt; *  This is an upgrade to the previous Music Visualizer Project&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; *  Code by:&lt;/span&gt;
&lt;span class="cm"&gt; *  Abhik Pal; 19th Jan 2014, 14:03&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="c1"&gt;// Import the Minim and Serial Libraries&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ddf.minim.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;processing.serial.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// creating the required objects&lt;/span&gt;
&lt;span class="n"&gt;Minim&lt;/span&gt; &lt;span class="n"&gt;minim&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;AudioInput&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// This value will be sent to the Arduino&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sendVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//The P3D mode is trivial, it just speeds up things&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;P3D&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;minim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Minim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Setting &amp;#39;in&amp;#39; to be the current input stream&lt;/span&gt;
  &lt;span class="c1"&gt;// of audio. This will be equivalent to the output&lt;/span&gt;
  &lt;span class="c1"&gt;// stream as we have selected &amp;#39;Stereo Mix&amp;#39; as our&lt;/span&gt;
  &lt;span class="c1"&gt;// default recording device&lt;/span&gt;
  &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLineIn&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// change the COM port to match your Arduino&amp;#39;s COM port&lt;/span&gt;
  &lt;span class="c1"&gt;// change the baud Rate if you have used someting&lt;/span&gt;
  &lt;span class="c1"&gt;// different from 9600 bauds.&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// clearing the screen&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bufferSize&lt;/span&gt;&lt;span class="o"&gt;()/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)*&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// self explanatory variables ...  :)&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;nextRightVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;leftVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;nextLeftVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;avgVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;nextAvgVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextLeftVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nextRightVal&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// draw some waveforms&lt;/span&gt;
    &lt;span class="c1"&gt;// the average values&amp;#39; waveform&lt;/span&gt;
    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;avgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nextAvgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// waveforms for the left and right audio channels&lt;/span&gt;
    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;225&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;leftVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;225&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nextLeftVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nextRightVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// sendVal is the average of the left and right channels&lt;/span&gt;
    &lt;span class="n"&gt;sendVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;avgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sendVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sendVal&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// draw a rectangle to show the value to be sent&lt;/span&gt;
    &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rectLen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sendVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rectLen&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Send the required values to the Arduino&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sendVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Upload the Dimmer example to your Arduino board and run the Processing sketch. Turn up the volume and try playing some sound files on your computer, they need not be located in the same folder as your Processing sketch. You should see the wave-forms in the Processing sketch change and your &lt;span class="caps"&gt;LED&lt;/span&gt; flash&amp;nbsp;accordingly.&lt;/p&gt;
&lt;img alt="Final Step" src="/images/music_visualizer_2/main.png" /&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhik Pal</dc:creator><pubDate>Sat, 01 Feb 2014 15:35:23 +0530</pubDate><guid isPermaLink="false">tag:abhikpal.github.io,2014-02-01:/blog/2014/02/01/music-visualizer-upgraded</guid><category>arduino</category><category>processing</category></item><item><title>Simple Music Visualizer</title><link>http://abhikpal.github.io/blog/2014/01/16/simple-music-visualizer</link><description>&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If you are new to serial communication between Arduino and Processing you refer to the (slightly long) tutorial &lt;a class="reference external" href="http://abhikpal.github.io/blog/2013/10/05/getting-started-with-arduino-processing-serial-communication"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In my last post I made a &lt;a class="reference external" href="http://abhikpal.github.io/blog/2014/01/01/paper-glowdrons"&gt;glowing dodecahedron&lt;/a&gt; out of paper and some glue. In this project I convert the same dodecahedron to make a super simple music visualizer using Processing and&amp;nbsp;Arduino.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="dodecahedron" src="/images/music_visualizer/dodec.jpg" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;p&gt;This project uses only one color of the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; i.e., you can substitute the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; with a usual &lt;span class="caps"&gt;LED&lt;/span&gt;. (Using the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt;? The wiring diagrams are on the &lt;a class="reference external" href="http://abhikpal.github.io/blog/2014/01/01/paper-glowdrons"&gt;dodecahedron post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is way simpler than Adafruit&amp;#8217;s &lt;a class="reference external" href="http://learn.adafruit.com/piccolo"&gt;Piccolo&lt;/a&gt; and all it does is change the brightness of the &lt;span class="caps"&gt;LED&lt;/span&gt; based on average of the values sent to the left and right audio channels. The processing sketch uses the Minim library (included by default in recent versions of Processing) to get the values out of the audio buffer and make some (weird?) visual on the&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;We will use the dimmer sketch to convert the values sent by the processing sketch to the equivalent &lt;span class="caps"&gt;LED&lt;/span&gt; brightness. You can upload the example sketch at &amp;#8216;File &amp;gt;&amp;gt; Examples &amp;gt;&amp;gt; 04.Communication &amp;gt;&amp;gt; Dimmer&amp;#8217; to your Arduino to do this for you. Make sure to change the  &lt;tt class="docutils literal"&gt;ledPin&lt;/tt&gt; variable to the pin number your &lt;span class="caps"&gt;LED&lt;/span&gt; is connected to. Compile and upload the sketch. We can now move to the Processing&amp;nbsp;sketch.&lt;/p&gt;
&lt;p&gt;Here is the Processing sketch that we&amp;#8217;ll be&amp;nbsp;using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * A Simple Monochromatic sound Visualizer&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * This sketch plays a sound and sends the average&lt;/span&gt;
&lt;span class="cm"&gt; * values in the audio buffer as integer values to the arduino&lt;/span&gt;
&lt;span class="cm"&gt; * where an LED changes its brightness based on the values sent.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * This project is an extension to the &amp;quot;Glowing Dodecahedron&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt; * project and adds a bit of functionality to the dodecahedron.&lt;/span&gt;
&lt;span class="cm"&gt; * The &amp;quot;Glowing Dodecahedron&amp;quot; project is available with instructions&lt;/span&gt;
&lt;span class="cm"&gt; * and required circuit diagrams at:&lt;/span&gt;
&lt;span class="cm"&gt; * http://theblubot.blogspot.com/2014/01/glowing-dodecahedron.html&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * design and code by:&lt;/span&gt;
&lt;span class="cm"&gt; * Abhik Pal. 10th January 2014, 23:13&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="c1"&gt;// Importing the Minim and Serial libraries&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ddf.minim.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;processing.serial.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// creating required objects&lt;/span&gt;
&lt;span class="n"&gt;AudioPlayer&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Minim&lt;/span&gt; &lt;span class="n"&gt;minim&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// variable to store the value to be sent&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sendVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// variable to store whether the song is being played or not&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// setting the size to be the current display size&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;displayWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;displayHeight&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// setting everything up!&lt;/span&gt;
  &lt;span class="n"&gt;minim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Minim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// make sure to change the stuff inside the&lt;/span&gt;
  &lt;span class="c1"&gt;// &amp;quot;quotes&amp;quot; to mathch the file you want to play&lt;/span&gt;
  &lt;span class="c1"&gt;// here I&amp;#39;m playing &amp;quot;song.mp3&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;song&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// change the COM port to match your Arduino&amp;#39;s COM port&lt;/span&gt;
  &lt;span class="c1"&gt;// change the baud Rate if you have used someting&lt;/span&gt;
  &lt;span class="c1"&gt;// different from 9600 bauds.&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// clearing out the screen by creating a rectangle&lt;/span&gt;
  &lt;span class="c1"&gt;// having dimentions of the screen size.&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// this loop is used to extract and display visuals&lt;/span&gt;
  &lt;span class="c1"&gt;// based on the values present int the audio buffer&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bufferSize&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// variables to store the right and left audio values&lt;/span&gt;
    &lt;span class="c1"&gt;// i.e. sound being sent to each left and right speaker.&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;leftVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// the next few lines account for the pattern being&lt;/span&gt;
    &lt;span class="c1"&gt;// displayed on the screen&lt;/span&gt;
    &lt;span class="n"&gt;pushMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radians&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bufferSize&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;

    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;leftVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;leftVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;popMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// variable to store the average of the left and right channel&lt;/span&gt;
    &lt;span class="c1"&gt;// audio.&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;avgVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rightVal&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// display a graph based on the average values&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)-&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;avgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;strokeWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)-&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;avgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// a value to temprarily store the value to be sent.&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tempVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;avgVal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;tempVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempVal&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// setting the value to be sent to be equal to the&lt;/span&gt;
    &lt;span class="c1"&gt;// temporary value.&lt;/span&gt;
    &lt;span class="n"&gt;sendVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempVal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// send out the value to your Arduino&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sendVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// a bar indicating the sent values&lt;/span&gt;
  &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rectLen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sendVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rectLen&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// function to change play/pause the song each time the&lt;/span&gt;
&lt;span class="c1"&gt;// left mouse button is pressed.&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;mousePressed&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// if the song is already being played&lt;/span&gt;
  &lt;span class="c1"&gt;// we pause it and change the value of isPlaying variable&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isPlaying&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pause&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;isPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// and if it is paused we play it and change &amp;#39;isPlaying&amp;#39; accordingly&lt;/span&gt;
  &lt;span class="c1"&gt;// :P pretty simple right?&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;play&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;isPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before running the sketch you need to save it and place a sound file in the same folder that has your sketch. Also, change &lt;tt class="docutils literal"&gt;&amp;quot;song.mp3&amp;quot;&lt;/tt&gt; in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;song&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to the file that you want to play. And yes, make changes to the &lt;span class="caps"&gt;COM&lt;/span&gt; port accordingly in the following&amp;nbsp;line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Connect your Arduino and run your code in &amp;#8216;Present&amp;#8217; mode using the keyboard shortcut &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt; (or by navigating to &amp;#8216;Sketch &amp;gt;&amp;gt; Present&amp;#8217; in the Processing &lt;span class="caps"&gt;IDE&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Once you run your code, you need to click anywhere in the screen to play/pause the song. If the song is being played; you would see something that resembles the screenshot given below. The white bar on the top indicates the value being sent, the green graph on the bottom shows the average values in the audio buffer and the central visual changes according to the values in the left and right audio&amp;nbsp;channels.&lt;/p&gt;
&lt;img alt="processing sketch screenshot" src="/images/music_visualizer/screenshot_4.png" /&gt;
&lt;div class="admonition admonition-update"&gt;
&lt;p class="first admonition-title"&gt;update&lt;/p&gt;
&lt;p class="last"&gt;Placing the sound file you want to play in the sketch folder everytime can get very tedious very soon. The &lt;a class="reference external" href="http://abhikpal.github.io/blog/2014/02/01/music-visualizer-upgraded"&gt;upgraded version of the visualizer&lt;/a&gt; uses the &amp;#8216;Stereo Mix&amp;#8217; recording device to grab eveything from your machine&amp;#8217;s output audio stream, hence removing the unnessary hassle. The upgraded version can be found&amp;nbsp;here.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhik Pal</dc:creator><pubDate>Thu, 16 Jan 2014 22:05:32 +0530</pubDate><guid isPermaLink="false">tag:abhikpal.github.io,2014-01-16:/blog/2014/01/16/simple-music-visualizer</guid><category>arduino</category><category>processing</category></item><item><title>Paper Glowdrons</title><link>http://abhikpal.github.io/blog/2014/01/01/paper-glowdrons</link><description>&lt;p&gt;I had nothing particularly exciting to do for the winter break and needed a way to use the super bright &lt;span class="caps"&gt;RGB&lt;/span&gt; LEDs that I had received recently in mail. I ended up combining some origami with a super bright &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; and got these cool looking glowing dodecahedrons, aka &amp;#8216;Glowdrons.&amp;#8217; This hybrid, if no one has already named it, I call dibs on the names &amp;#8216;Oritronics,&amp;#8217; or&amp;nbsp;&amp;#8216;Electrogami.&amp;#8217;&lt;/p&gt;
&lt;p&gt;This project combines some basic electronics (Arduino + a super bright &lt;span class="caps"&gt;LED&lt;/span&gt;) with &lt;em&gt;modular origami&lt;/em&gt; (the kind of origami where you join smaller units to make a larger model. Also known as the &amp;#8220;cool&amp;#8221; type of origami) It is also stupidly simple. Interested? Follow&amp;nbsp;along.&lt;/p&gt;
&lt;p&gt;The fun and time-taking part of the project is the construction of the dodecahedron, so we begin by making our very own paper dodecahedron. You don
t need anything complicated. Get some colored paper (I used black), some white paper (make sure the &lt;span class="caps"&gt;LED&lt;/span&gt; you are using gives out enough light to penetrate this paper), glue, pencil, a ruler, a pair of scissors and a hobby&amp;nbsp;knife.&lt;/p&gt;
&lt;img alt="Stuff you need" src="/images/glowdron/stuff_you_need.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Start by cutting the colored paper into 30 equal sized squares. I made my squares about &lt;span class="formula"&gt;7&lt;i&gt;cm&lt;/i&gt; × 7&lt;i&gt;cm&lt;/i&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;img alt="Squares!" src="/images/glowdron/squares.JPG" style="width: 50%;" /&gt;
&lt;p&gt;To make our dodecahedron we will need about 30 similarly folded structures called &amp;#8220;units&amp;#8221; or&amp;nbsp;&amp;#8220;modules.&amp;#8221;&lt;/p&gt;
&lt;div class="section" id="folding-one-module"&gt;
&lt;h2&gt;Folding one&amp;nbsp;module&lt;/h2&gt;
&lt;img alt="fold_step_01" src="/images/glowdron/01.JPG" style="width: 50%;" /&gt;
&lt;p&gt;To fold a single module, start with a square sheet of&amp;nbsp;paper&lt;/p&gt;
&lt;img alt="fold_step_02" src="/images/glowdron/02.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Fold the paper in half as shown in the picture&amp;nbsp;above&lt;/p&gt;
&lt;img alt="fold_step_03" src="/images/glowdron/03.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Fold down the top edges towards the center fold to make an &amp;#8216;M&amp;#8217; shape as&amp;nbsp;shown.&lt;/p&gt;
&lt;img alt="fold_step_04" src="/images/glowdron/04.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Fold the bottom left corner at a 45 degree&amp;nbsp;angle&lt;/p&gt;
&lt;img alt="fold_step_05" src="/images/glowdron/05.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Fold down the top right cornet at a 45 degree angle. This step is similar to the previous&amp;nbsp;step.&lt;/p&gt;
&lt;img alt="fold_step_06" src="/images/glowdron/06.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Make a fold connecting the two dots as shown in the picture&amp;nbsp;above.&lt;/p&gt;
&lt;img alt="fold_step_07" src="/images/glowdron/07.JPG" style="width: 50%;" /&gt;
&lt;p&gt;After you connect the points indicated in the previous step, you should get something that looks like this&amp;nbsp;picture.&lt;/p&gt;
&lt;p&gt;The thing that you just finished making is called a module. You need to make 30 of these to make a complete&amp;nbsp;dodecahedron.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="assembly"&gt;
&lt;h2&gt;Assembly&lt;/h2&gt;
&lt;p&gt;If you observe the module you will find two smaller triangles and two larger triangles, we will use these to create interlocking structures which will come together to form the&amp;nbsp;dodecahedron.&lt;/p&gt;
&lt;img alt="assembly_step_01" src="/images/glowdron/a_01.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Insert the one of the smaller triangles into the flaps of the bigger&amp;nbsp;triangle.&lt;/p&gt;
&lt;img alt="assembly_step_02" src="/images/glowdron/a_02.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Add one more module in a similar way to create a&amp;nbsp;vertex.&lt;/p&gt;
&lt;p&gt;Once you create a vertex keep adding modules to the free ends of the vertex. After joining about 10 modules you should be left with a pentagonal face that looks something like the picture&amp;nbsp;below.&lt;/p&gt;
&lt;img alt="assembly_step_03" src="/images/glowdron/a_03.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Use your pencil to trace out the pentagon on the white sheet of&amp;nbsp;paper.&lt;/p&gt;
&lt;img alt="assembly_step_04" src="/images/glowdron/a_04.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Cut out this pentagon making sure that you leave some border outside, this need not be perfect because we will stick it inside our face to act as windows for the light to go&amp;nbsp;out.&lt;/p&gt;
&lt;img alt="assembly_step_05" src="/images/glowdron/a_05.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Apply some glue to the borders of the face from the&amp;nbsp;inside.&lt;/p&gt;
&lt;img alt="assembly_step_06" src="/images/glowdron/a_06.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Stick the piece of white paper that you just cut on this&amp;nbsp;side.&lt;/p&gt;
&lt;img alt="assembly_step_07" src="/images/glowdron/a_07.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Continue adding modules and sticking white paper. Leave at least one side that has no white paper attached to it. This will allow us to install the dodecahedron on top our &lt;span class="caps"&gt;LED&lt;/span&gt;. Once the assembly is complete you should have a paper dodecahedron. Mine looked like the one&amp;nbsp;below.&lt;/p&gt;
&lt;img alt="final dodecahedron" src="/images/glowdron/dodec_final.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Now, we have our dodecahedron all we need to do now is add some &lt;em&gt;&amp;#8220;glow&amp;#8221;&lt;/em&gt; to&amp;nbsp;it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-glow"&gt;
&lt;h2&gt;Adding&amp;nbsp;&amp;#8220;glow&amp;#8221;&lt;/h2&gt;
&lt;img alt="ards" src="/images/glowdron/DSCN1089.JPG" style="width: 50%;" /&gt;
&lt;p&gt;To make the dodecahedron glow, I used a 220 Ohm resistor, a super-bright common anode &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt;, some wire pieces, an Arduino clone, and a proto-shield with a mini bread-board. you can eliminate the proto shield and make the circuit on a breadboard or perf-board&amp;nbsp;instead.&lt;/p&gt;
&lt;img alt="compo" src="/images/glowdron/DSCN1086.JPG" style="width: 50%;" /&gt;
&lt;p&gt;If you are using the shield start by attaching it to your&amp;nbsp;Arduino.&lt;/p&gt;
&lt;img alt="restr" src="/images/glowdron/DSCN1090.JPG" style="width: 50%;" /&gt;
&lt;p&gt;As the &lt;span class="caps"&gt;LED&lt;/span&gt; I used was a common anode &lt;span class="caps"&gt;RGB&lt;/span&gt; led meaning that all the LEDs inside the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; share the same positive power supply. So, connect the resistor from the 5V rail to the&amp;nbsp;breadboard.&lt;/p&gt;
&lt;img alt="restr" src="/images/glowdron/DSCN1091.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Similar to LEDs and ICs you can identify the first pin of the &lt;span class="caps"&gt;RGB&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; from the corner which looks a bit different from the others. You can figure out the pin mapping yourself using a 3V battery or consult the datasheet for the &lt;span class="caps"&gt;LED&lt;/span&gt; you are using. The pin mapping of the &lt;span class="caps"&gt;LED&lt;/span&gt; I used is shown below. notice that the red lead has got a different&amp;nbsp;corner.&lt;/p&gt;
&lt;img alt="instr_led1" src="/images/glowdron/DSCN1087.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Connect the &lt;span class="caps"&gt;LED&lt;/span&gt; to your breadboard by aligning the common anode to the point where you connected the resistor. I found it easier to insert the &lt;span class="caps"&gt;LED&lt;/span&gt; by rotating it at about 45&amp;nbsp;degrees.&lt;/p&gt;
&lt;img alt="instr_led2" src="/images/glowdron/DSCN1094.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Now, connect the red, green and blue leads to the pins that you wish to use. I used the pins 9, 10, 11 to connect the red, green and blue pins&amp;nbsp;respectively.&lt;/p&gt;
&lt;img alt="instr_led3" src="/images/glowdron/DSCN1096.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Finally, cover your &lt;span class="caps"&gt;LED&lt;/span&gt; using the dodecahedron you just&amp;nbsp;made.&lt;/p&gt;
&lt;img alt="final" src="/images/glowdron/DSCN1102.JPG" style="width: 50%;" /&gt;
&lt;p&gt;Load some code to control your &lt;span class="caps"&gt;LED&lt;/span&gt; and there you have it, your very own paper dodecahedron. You can try the same thing with other structures like cubes or tetrahedrons. Google &amp;#8220;modular origami&amp;#8221; to get some nice things you can do with&amp;nbsp;paper.&lt;/p&gt;
&lt;p&gt;Happy&amp;nbsp;2014.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhik Pal</dc:creator><pubDate>Wed, 01 Jan 2014 00:24:40 +0530</pubDate><guid isPermaLink="false">tag:abhikpal.github.io,2014-01-01:/blog/2014/01/01/paper-glowdrons</guid><category>arduino</category><category>processing</category><category>origami</category></item><item><title>Getting Started With Arduino-Processing Serial Communication</title><link>http://abhikpal.github.io/blog/2013/10/05/getting-started-with-arduino-processing-serial-communication</link><description>&lt;p&gt;This (slightly long) tutorial will try to get a beginner started with Arduino Processing communication. This tutorial assumes that you know how to perform basic operations like uploading sketches, writing and compiling Arduino code, and some basics of&amp;nbsp;processing.&lt;/p&gt;
&lt;p&gt;The code discussed in this tutorial can be found &lt;a class="reference external" href="http://gist.github.com/abhikpal/6822845"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="gathering-what-you-need"&gt;
&lt;h2&gt;Gathering what you&amp;nbsp;need&lt;/h2&gt;
&lt;div class="section" id="hardware"&gt;
&lt;h3&gt;Hardware&lt;/h3&gt;
&lt;p&gt;There are a very few things that you need for performing a basic Arduino-Processing communication. Most probably you will have the major part of the components lying around you. But still (for some reason still unknown to me!), I think it is better to go through the list once. So in no particular order, these are the things you will&amp;nbsp;need:&lt;/p&gt;
&lt;div class="section" id="an-arduino-board"&gt;
&lt;h4&gt;An Arduino&amp;nbsp;Board&lt;/h4&gt;
&lt;img alt="Arduino" src="/images/arduino_processing_interact/freeduino.JPG" style="width: 50%;" /&gt;
&lt;p&gt;The original Arduino boards come in many flavors, from small Arduino Micros to large Arduino Megas. Arduino clones on the other hand have a different story; these boards function like an Arduino would but often have more features and are the cheaper alternatives to an official Arduino board. For this tutorial I&amp;#8217;m going to use Freeduino &lt;span class="caps"&gt;USB&lt;/span&gt; Arduino compatible board designed by some guy at Probots (&amp;lt;&lt;a class="reference external" href="http://www.probots.co.in"&gt;http://www.probots.co.in&lt;/a&gt;&amp;gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-led"&gt;
&lt;h4&gt;An &lt;span class="caps"&gt;LED&lt;/span&gt;&lt;/h4&gt;
&lt;img alt="LED" src="/images/arduino_processing_interact/led.JPG" style="width: 50%;" /&gt;
&lt;p&gt;These are the small things that light up here and there in almost every electronics project. I&amp;#8217;m using a standard 5mm red &lt;span class="caps"&gt;LED&lt;/span&gt; for this tutorial but LEDs of other color or even buzzers can be used. The use of the &lt;span class="caps"&gt;LED&lt;/span&gt; is optional as most of the Arduino boards have one connected on pin&amp;nbsp;13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-potentiometer"&gt;
&lt;h4&gt;A&amp;nbsp;Potentiometer&lt;/h4&gt;
&lt;img alt="Potm" src="/images/arduino_processing_interact/pot.JPG" style="width: 50%;" /&gt;
&lt;p&gt;In addition to a &lt;span class="caps"&gt;LED&lt;/span&gt; and an Arduino you will need a potentiometer to act as a simple input device. We will use this potentiometer in Topic 2 to control a simple visual on our computer screen. I recommend that you solder wires to your potentiometer, because it makes them easy to connect and use. I will use a 10K rotatory potentiometer in this tutorial, but other sensors like LDRs, Infrared proximity sensors, Microphones or &lt;span class="caps"&gt;SONAR&lt;/span&gt; can also be used with appropriate change in the circuitry and&amp;nbsp;code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-3v-coin-cell"&gt;
&lt;h4&gt;A 3V Coin&amp;nbsp;Cell&lt;/h4&gt;
&lt;img alt="coin_cell" src="/images/arduino_processing_interact/coin_cell.JPG" style="width: 50%;" /&gt;
&lt;p&gt;This is not exactly a necessity but having a 3V cell will help you test you LEDs or check for their polarity or make some small and awesome &lt;span class="caps"&gt;LED&lt;/span&gt; throwies(&amp;lt;&lt;a class="reference external" href="http://makezine.com/projects/extreme-led-throwies/"&gt;http://makezine.com/projects/extreme-led-throwies/&lt;/a&gt;&amp;gt;)&lt;/p&gt;
&lt;p&gt;In addition to these you will need a &lt;span class="caps"&gt;USB&lt;/span&gt; cable to connect your Arduino to your computer and a soldering iron to solder wires to your&amp;nbsp;potentiometer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software"&gt;
&lt;h3&gt;Software&lt;/h3&gt;
&lt;p&gt;The two programs you will need for thus tutorial are the Arduino &lt;span class="caps"&gt;IDE&lt;/span&gt; which can be found by navigating to the &amp;#8216;Downloads&amp;#8217; page at &amp;lt;&lt;a class="reference external" href="http://www.Arduino.cc"&gt;http://www.Arduino.cc&lt;/a&gt;&amp;gt;. Depending on your choice you can download either of the Arduino installer or the &lt;span class="caps"&gt;ZIP&lt;/span&gt; archive. It is freely available and open&amp;nbsp;source.&lt;/p&gt;
&lt;img alt="arduino_website" src="/images/arduino_processing_interact/arduino_download.png" /&gt;
&lt;p&gt;The second software is the Processing &lt;span class="caps"&gt;IDE&lt;/span&gt;, which too like the Arduino &lt;span class="caps"&gt;IDE&lt;/span&gt; is open sourced and can be downloaded for free by following the &amp;#8216;Downloads&amp;#8217; link at &lt;a class="reference external" href="http://www.processing.org"&gt;http://www.processing.org&lt;/a&gt;&amp;nbsp;.&lt;/p&gt;
&lt;img alt="processing_website" src="/images/arduino_processing_interact/processing_download.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sending-data-to-your-arduino-board"&gt;
&lt;h2&gt;Sending data to your Arduino&amp;nbsp;board&lt;/h2&gt;
&lt;p&gt;Sending data from your processing sketch to control the state of a &lt;span class="caps"&gt;LED&lt;/span&gt; on your&amp;nbsp;Arduino.&lt;/p&gt;
&lt;div class="section" id="making-the-circuit"&gt;
&lt;h3&gt;Making the&amp;nbsp;Circuit&lt;/h3&gt;
&lt;p&gt;If your Arduino has a led connected to pin 13, you can jump directly to the coding&amp;nbsp;section.&lt;/p&gt;
&lt;p&gt;The circuit is super simple and you will need your Arduino board and a &lt;span class="caps"&gt;LED&lt;/span&gt; to make it. Disconnect power from your Arduino before you start making your&amp;nbsp;circuit.&lt;/p&gt;
&lt;img alt="coin_cell_test" src="/images/arduino_processing_interact/led_test.JPG" /&gt;
&lt;p&gt;First test your &lt;span class="caps"&gt;LED&lt;/span&gt; using a 3V coin cell. Now, connect the longer lead (positive terminal) of the &lt;span class="caps"&gt;LED&lt;/span&gt; to pin 13 of your Arduino, the shorter lead (negative terminal) goes to the &lt;span class="caps"&gt;GND&lt;/span&gt; (Ground) pin near pin 13. If your &lt;span class="caps"&gt;LED&lt;/span&gt; has both the leads of equal length, identify the positive and the negative terminals using the 3V coin cell. Below are the computer generated and actual set up of the&amp;nbsp;circuit:&lt;/p&gt;
&lt;img alt="ard_circ" src="/images/arduino_processing_interact/Processing_Arduino_1_bb.png" /&gt;
&lt;div class="admonition admonition-update"&gt;
&lt;p class="first admonition-title"&gt;Update&lt;/p&gt;
&lt;p class="last"&gt;As  &lt;a class="reference external" href="http://forum.Arduino.cc//index.php?action=profile;u=5282"&gt;Grumpy_Mike&lt;/a&gt; pointed out in the Arduino forum post (&amp;lt;&lt;a class="reference external" href="http://forum.Arduino.cc//index.php?topic=191586.0"&gt;http://forum.Arduino.cc//index.php?topic=191586.0&lt;/a&gt;&amp;gt;) regarding this tutorial, a current limiting resistor (330 ohms will work fine) should be added between the shorter lead of the &lt;span class="caps"&gt;LED&lt;/span&gt; and the Arduino ground pin. You can however directly attach the &lt;span class="caps"&gt;LED&lt;/span&gt; to the ground pin if your Arduino has a current limiting resistor connected on pin 13 (most of the older Arduinos have one attached, and the clone I&amp;#8217;m using is one of&amp;nbsp;them).&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="ard_circ_" src="/images/arduino_processing_interact/Slide1.JPG" /&gt;
&lt;/div&gt;
&lt;div class="section" id="the-arduino-code"&gt;
&lt;h3&gt;The Arduino&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;Open your Arduino &lt;span class="caps"&gt;IDE&lt;/span&gt; and you are ready to start&amp;nbsp;coding.&lt;/p&gt;
&lt;p&gt;We start by allocating a variable name to our &lt;span class="caps"&gt;LED&lt;/span&gt; and setting it as output. This can be achieved by typing the following code&amp;nbsp;snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ledPin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, to communicate with our processing sketch we need to initialize the serial communication; this we do by calling the &lt;tt class="docutils literal"&gt;begin()&lt;/tt&gt; method on the &lt;tt class="docutils literal"&gt;Serial&lt;/tt&gt; object. The syntax used for initializing the serial port&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baud_rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Baud is a variable unit of data transmission speed, or simply 1 baud = 1 bit per second. The term &amp;#8216;baud&amp;#8217; comes from the name of a French inventor &lt;span class="caps"&gt;J. M. E.&lt;/span&gt; Baudot. A baud rate of 9600 will be fine for us. So the final line of code that we have to include in our &lt;tt class="docutils literal"&gt;setup()&lt;/tt&gt; function is&amp;nbsp;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once our serial port is initialized we need to check for any available data. So, in our &lt;tt class="docutils literal"&gt;loop()&lt;/tt&gt; function we use a simple if statement to check if there is any available&amp;nbsp;data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If data is available in the serial buffer the condition &lt;tt class="docutils literal"&gt;Serial.available()&lt;/tt&gt; evaluates to true and the if-block is&amp;nbsp;executed.&lt;/p&gt;
&lt;p&gt;We have opened up the serial port, checked for data availability, so our next job is to actually use the data. We will declare a variable of type &lt;tt class="docutils literal"&gt;char&lt;/tt&gt; called &lt;tt class="docutils literal"&gt;inputValue&lt;/tt&gt; and assign it to the data available in the serial buffer. We do this operation by&amp;nbsp;using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;read()&lt;/tt&gt; method takes the data available in the Serial buffer and stores it in our &lt;tt class="docutils literal"&gt;inputValue&lt;/tt&gt; variable. This statement is typed inside the if-bock we discussed&amp;nbsp;before.&lt;/p&gt;
&lt;p&gt;Now, if the data we receive is &lt;tt class="docutils literal"&gt;H&lt;/tt&gt; we will turn on the &lt;span class="caps"&gt;LED&lt;/span&gt; if it is &lt;tt class="docutils literal"&gt;L&lt;/tt&gt; we will turn off the &lt;span class="caps"&gt;LED&lt;/span&gt;, if it is neither &lt;tt class="docutils literal"&gt;H&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;L&lt;/tt&gt; we do nothing. So we add the following lines after storing the value to exhibit this&amp;nbsp;behavior:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;L&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// we will do nothing if the data is&lt;/span&gt;
  &lt;span class="c1"&gt;// anything other than a &amp;#39;H&amp;#39; or a &amp;#39;L&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally at the end of the &lt;tt class="docutils literal"&gt;loop()&lt;/tt&gt; function we will add a small &lt;tt class="docutils literal"&gt;delay()&lt;/tt&gt; of 10 milliseconds to avoid overloading the Arduino with&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;The final code if you have followed along should look something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Arduino Code for Example 1&lt;/span&gt;
&lt;span class="c1"&gt;// (arduino_example_1.ino)&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ledPin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;L&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// we will do nothing if the data is&lt;/span&gt;
      &lt;span class="c1"&gt;// anything other than a ‘H’ or a ‘L’&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the code is written upload it to your Arduino, and open the Serial Monitor. Try sending the values to your Arduino like &lt;tt class="docutils literal"&gt;H&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;L&lt;/tt&gt; or anything else. The &lt;span class="caps"&gt;LED&lt;/span&gt; should light up every time you send an &lt;tt class="docutils literal"&gt;H&lt;/tt&gt; and should turn off when you send a &lt;tt class="docutils literal"&gt;L&lt;/tt&gt;.&lt;/p&gt;
&lt;img alt="ard_1" src="/images/arduino_processing_interact/arduino_example_1.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="processing-code"&gt;
&lt;h3&gt;Processing&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;We start by importing the serial library for processing and setting up a basic&amp;nbsp;sketch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;processing.serial.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to send data through the serial port we need to first create an object of the Serial class. So we add the following line to our sketch after the import&amp;nbsp;line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now inside the &lt;tt class="docutils literal"&gt;setup()&lt;/tt&gt; function we initialize the arduinoPort object we&amp;nbsp;created.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;arduinoPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;this&lt;/tt&gt; is used to indicate that it is the current sketch that is going to talk to Arduino, &lt;tt class="docutils literal"&gt;9600&lt;/tt&gt; is the baud rate and &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;COM5&lt;/span&gt;&lt;/tt&gt; is the &lt;span class="caps"&gt;COM&lt;/span&gt; port to which our Arduino is connected. You need to change the &lt;span class="caps"&gt;COM&lt;/span&gt; port to the port your Arduino is&amp;nbsp;connected.&lt;/p&gt;
&lt;p&gt;Now, in the &lt;tt class="docutils literal"&gt;draw()&lt;/tt&gt; function we will draw a simple button, clicking the button will cause the led to light up and taking the mouse cursor out of the button will cause the &lt;span class="caps"&gt;LED&lt;/span&gt; to turn off. We draw our button using a simple&amp;nbsp;rectangle.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To check if the mouse cursor is inside our button we add a simple &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;if-else&lt;/span&gt;&lt;/tt&gt; block&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Processing &lt;tt class="docutils literal"&gt;mouseX&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;mouseY&lt;/tt&gt; are keywords and return the current mouse coordinates. So using them without any declaration will not cause any&amp;nbsp;errors.&lt;/p&gt;
&lt;p&gt;If the mouse cursor is inside our box we need to check if the mouse button is pressed (The term mouse button if not explicitly stated refers to the left mouse button) also, we need to change the color of the box to make the program a bit more interactive and intuitive to use. Therefore inside our &amp;#8216;if&amp;#8217; block we insert the following code&amp;nbsp;fragment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mousePressed&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like &lt;tt class="docutils literal"&gt;mouseX&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;mouseY&lt;/tt&gt; the &lt;tt class="docutils literal"&gt;mousePressed&lt;/tt&gt; keyword returns the state of the left mouse button i.e. &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; if not pressed and &lt;tt class="docutils literal"&gt;1&lt;/tt&gt; if pressed. So whenever we press the mouse button inside the button the sketch will execute the program statements inside the second &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; block. What we have to do now is send a command to the Arduino to light up the &lt;span class="caps"&gt;LED&lt;/span&gt; which we defined in the Arduino sketch to be a &lt;tt class="docutils literal"&gt;H&lt;/tt&gt; character so inside our second &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; block we will&amp;nbsp;add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This statement sends an &lt;tt class="docutils literal"&gt;H&lt;/tt&gt; character to our Arduino. The method &lt;tt class="docutils literal"&gt;write()&lt;/tt&gt; writes the arguments inside the parenthesis to the object on which it is called. i.e if we&amp;nbsp;type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will write the contents of the variable &lt;tt class="docutils literal"&gt;someValue&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;port&lt;/tt&gt; object.&lt;/p&gt;
&lt;p&gt;Finally we need to add some command which switches off the led when we take our mouse outside the button and change its color back to normal. So inside out outermost else block we will&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;L&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With your Arduino connected try running the processing sketch, you should see the &lt;span class="caps"&gt;LED&lt;/span&gt; light up every time you click inside the box and go off once you put your mouse out of the box. You should see something similar to the screen shot&amp;nbsp;below:&lt;/p&gt;
&lt;img alt="prs_1" src="/images/arduino_processing_interact/processing_example_1.png" /&gt;
&lt;p&gt;If something is wrong take a look at the completed code&amp;nbsp;below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Processing Code for Example 1&lt;/span&gt;
&lt;span class="c1"&gt;// (processing_example_1.pde)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;processing.serial.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;arduinoPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mousePressed&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;L&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sending-data-from-the-arduino-to-a-processing-sketch"&gt;
&lt;h2&gt;Sending Data from the Arduino to a Processing&amp;nbsp;Sketch&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Making the&amp;nbsp;Circuit&lt;/h3&gt;
&lt;p&gt;In Topic 1 we sent data from our computer to the Arduino and make a light turn on and off. This time we will do it the other way round i.e. from the Arduino to the computer.
To begin with the circuit construction solder wires to your pot meter.
A computerized version of the circuit is shown&amp;nbsp;below&lt;/p&gt;
&lt;img alt="ard_2" src="/images/arduino_processing_interact/Processing_Arduino_2_bb.png" /&gt;
&lt;p&gt;First, connect the two outer most wire to pins &lt;span class="caps"&gt;GND&lt;/span&gt; (Ground i.e. 0V) and the other to 5V pin. The middle wire aka the wiper should go to the pin marked&amp;nbsp;A0&lt;/p&gt;
&lt;p&gt;This way of connecting the pot meter insures that the potential difference (aka voltage) between the &lt;span class="caps"&gt;GND&lt;/span&gt; pin and &amp;#8216;A0&amp;#8217; is always a value between 0V and 5V. This setup can also be considered as an example of a simple &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Voltage_divider"&gt;Voltage Divider&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;the actual circuit is shown&amp;nbsp;below&lt;/p&gt;
&lt;img alt="ard_2_" src="/images/arduino_processing_interact/Slide2.JPG" /&gt;
&lt;/div&gt;
&lt;div class="section" id="arduino-code"&gt;
&lt;h3&gt;Arduino&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;Like the previous Arduino code we strat by creating a basic sketch and initializing the Serial&amp;nbsp;port.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we declare a variable to store the pin number of our pot-meter. We can assign a value of &amp;#8216;A0&amp;#8217; to an int but to make it look more int-like I&amp;#8217;m going to assign a value of 14 to our potPin variable (the numbering scheme for &amp;#8216;Analog In&amp;#8217; pins is quite simple, after digital Pin 13 A0 becomes 14, A1 becomes 15 and so&amp;nbsp;on&amp;#8230;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;potPin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &amp;#8216;Analog In&amp;#8217; pins are pre-configured as inputs so adding something&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;INTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be completely&amp;nbsp;useless.&lt;/p&gt;
&lt;p&gt;We now need read the pot meter and send the value over the serial port to our processing sketch. Therefore we first declare a variable of type int and assign it the value that we read from our pot meter. To do this add the following codee inside your &lt;tt class="docutils literal"&gt;loop()&lt;/tt&gt; function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;potMeterReading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;analogRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potPin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to send the value we just read from our pot meter through the Serial port to our processing sketch. This can be done&amp;nbsp;by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potMeterReading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we send something using the println method a &amp;#8216;n&amp;#8217; aka newline character is automatically appended at the end of our data. We will use this &amp;#8216;n&amp;#8217; character to later to collect our data in the processing&amp;nbsp;sketch.&lt;/p&gt;
&lt;p&gt;Finally, we add a small delay at the end of our code to make the result a bit more noticable while testing the code on the Arduino Serial&amp;nbsp;Monitor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In case you missed something here is the completed&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Arduino Code for Example 2&lt;/span&gt;
&lt;span class="c1"&gt;// (arduino_example_2.ino)&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;potPin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;potMeterReading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;analogRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potPin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potMeterReading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have checked and compiled your code upload it to your Arduino, open the Arduino Serial Monitor and try rotating your pot meter. You should see about 10 values pop up each second on your serial monitor indicating the reading of the pot&amp;nbsp;meter.&lt;/p&gt;
&lt;img alt="ard_2_c" src="/images/arduino_processing_interact/arduino_example_2.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Processing&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;We start by creating a basic processing sketch and initializing the Serial&amp;nbsp;port&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;processing.serial.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;arduinoPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we declare a global vaiable &lt;tt class="docutils literal"&gt;barLength&lt;/tt&gt; just before or &lt;tt class="docutils literal"&gt;setup()&lt;/tt&gt; function; this variable will store the current length of the rectangle we will display on the&amp;nbsp;screen&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;barLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our &lt;tt class="docutils literal"&gt;draw()&lt;/tt&gt; method we have to draw a rectangle with its length equal to &lt;tt class="docutils literal"&gt;barLength&lt;/tt&gt;. To do this we simply&amp;nbsp;add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;barLength&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also, the rectangles will be drawn every time the &lt;tt class="docutils literal"&gt;draw()&lt;/tt&gt; function is called; so we need to make sure that the screen is clear before we try to draw a new rectangle, as not clearing the screen will cause the rectangles to be drawn on top of each other and smaller rectangles would therefore would be rendered&amp;nbsp;invisible.&lt;/p&gt;
&lt;p&gt;So, before the &lt;tt class="docutils literal"&gt;rect()&lt;/tt&gt; function we just called in our &lt;tt class="docutils literal"&gt;draw()&lt;/tt&gt; function; add the following line of&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are done setting up the basic interface for our little program. Lets start to code the actual mechanism that will interpret the values received from the&amp;nbsp;Arduino&lt;/p&gt;
&lt;p&gt;Before we do anything with the data our Arduino is sending us we need to extract the useful information from the stream of data the Arduino is sending. As discussed in Section 2.2 of this tutorial we are going to use the&amp;#8217;n&amp;#8217; (newline) charcter to distinguish between different sets of data the Arduino is&amp;nbsp;sending.&lt;/p&gt;
&lt;p&gt;To check when we receive the newline charcter we will use the &lt;tt class="docutils literal"&gt;bufferUntil()&lt;/tt&gt; mrthid and call it on our arduinoPort object we just created. So, in the &lt;tt class="docutils literal"&gt;setup()&lt;/tt&gt; function after the Serial port initialization add this&amp;nbsp;line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bufferUntil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The line we just added will call another function called the serialEvent whenever a &amp;#8216;n&amp;#8217; is detected in the stream of data. The basic syntax for using the bufferUntil method&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bufferUntil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_term&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we will add the &lt;tt class="docutils literal"&gt;serialEvent()&lt;/tt&gt; fuction we just discussed. To do this type the following block of code after your &lt;tt class="docutils literal"&gt;draw()&lt;/tt&gt; function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;serialEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;serialEvent()&lt;/tt&gt; function takes a object of type Serial as its parameter (which many of you might have&amp;nbsp;noticed)&lt;/p&gt;
&lt;p&gt;All we need to do now is to get the value from the Arduino convert it to a type which we can use in our program. To extract the value we will declare a temporary variable of type String to store the raw values sent by the Arduino. We do this by&amp;nbsp;adding&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;rawInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readStringUntil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to our &lt;tt class="docutils literal"&gt;serialEvent()&lt;/tt&gt; function. This line of code stores all the values it reads from the arduinoPort object upto (but not including) the &lt;tt class="docutils literal"&gt;'\n'&lt;/tt&gt; character into a string which we have named &lt;tt class="docutils literal"&gt;rawInput&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Next, we need to remove any white spaces that might have found their way into the dat a and convert the resultant string to an int. Finally we will map the values the Arduino is sending from a 0 to 1023 scale to a 0 to 575 scale in order to prevent our rectangle to escape the screen if the value gets too&amp;nbsp;large.&lt;/p&gt;
&lt;p&gt;So just after the line we added, we add the last two lines of our&amp;nbsp;code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rawVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rawInput&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;barLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rawVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1023&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;575&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above two lines we first trim the String rawInput to remove any white spaces using the &lt;tt class="docutils literal"&gt;trim()&lt;/tt&gt; function. Then we use type casting to convert the value of the trimmed string to an int using the &lt;tt class="docutils literal"&gt;int()&lt;/tt&gt; syntax. Finally we map the value received after type casting from a range of 0 to 1023 to a range of 0 to 575 i.e. our maximum&amp;nbsp;barLength&lt;/p&gt;
&lt;p&gt;Here is the completed code in case you missed&amp;nbsp;something:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Processing Code for Example 2&lt;/span&gt;
&lt;span class="c1"&gt;// processing_example_2.pde&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;processing.serial.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;barLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;noStroke&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;arduinoPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;COM5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bufferUntil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;barLength&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;serialEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;rawInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arduinoPort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readStringUntil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rawVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rawInput&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;barLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rawVal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1023&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;575&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with your Arduino connected to your computer run the code. You will see a window similar to one shown below pop up and on turning the pot-meter you will see the length of the rectangle&amp;nbsp;change.&lt;/p&gt;
&lt;img alt="prs2_c" src="/images/arduino_processing_interact/processing_example_2.png" /&gt;
&lt;p&gt;Phew! that was one long tutorial and hopefully you got to know how to perform a basic Arduino-Processing Communication. Now, you can use this knowledge to build spaceships, time machines, control robots from the internet, connect your gadgets to the net and some other cool&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;Feel free to post any queries, suggestions, corrections or any other related stuff in the comments below&amp;nbsp;:).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhik Pal</dc:creator><pubDate>Sat, 05 Oct 2013 12:29:27 +0530</pubDate><guid isPermaLink="false">tag:abhikpal.github.io,2013-10-05:/blog/2013/10/05/getting-started-with-arduino-processing-serial-communication</guid><category>arduino</category><category>processing</category></item></channel></rss>